[
{
	"uri": "http://zui.zywave.com/developers/",
	"title": "Developers",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://zui.zywave.com/foundations/",
	"title": "Foundations",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://zui.zywave.com/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": " Status This repository now manages all ZUI packages; this means that releasing stable versions of individual packages is a bit of a headache. However, if you\u0026rsquo;d like to start using ZUI, you should know which components are safe and which are not.\n   icon meaning     ✅ This package is stable and ready to be used   ⚠️ This package is relatively stable, but still needs work   ❌ This package is WIP   ❔ Unknown (e.g. hasn\u0026rsquo;t started, still being planned, etc.)     Components    package status comments     zui-base ⚠️    zui-button ✅    zui-card ✅    zui-checkbox ✅    zui-components-all ✅    zui-custom-style ✅    zui-dialog ✅    zui-expander ✅    zui-icons ✅    zui-input ✅    zui-logo ✅    zui-multipicker ⚠️    zui-notifier ⚠️    zui-pager ✅    zui-pages ✅    zui-picker ⚠️    zui-radio ✅    zui-search ✅    zui-select ✅    zui-shell ✅    zui-spinner ✅    zui-step-flow ✅    zui-svg ✅    zui-table ❔    zui-tabs ✅    zui-toggle ✅    zui-well ✅      Styles    package status comments     zui-app-styles ⚠️    zui-base-styles ✅    zui-grid-styles ❔    zui-sass-scripts ✅      Misc    package status comments     zui-bundle ✅    zui-knockout-extensions ✅     "
},
{
	"uri": "http://zui.zywave.com/patterns/",
	"title": "Patterns",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://zui.zywave.com/communications/",
	"title": "Communications",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://zui.zywave.com/personas/",
	"title": "Personas",
	"tags": [],
	"description": "",
	"content": " When designing our software, it is important to know who uses our products and what motivates them. Below you will find personas we created based on research and conversations we had with our Partners.\n Alice Account relationship manager Background Hi, I\u0026rsquo;m Alice. I had no insurance background or knowledge when I first started working in the insurance industry. Once I got started, I found that I love serving our clients. I deepened my knowledge by attending a series of classes and earning a certification. Even though I may change agencies at some point, I can\u0026rsquo;t see myself ever switching careers.\n  Common roles  CSR Intern Administrative assistant/marketing Relationship building Support Communication Retention    \nGoals\n Retain and satisfy Please clients and coworkers Improve methods to provide better service for clients Learn how to give and take criticism   \nWorries\n Managing time Dealing with difficult clients Keeping up with policy and form changes Balancing work and home   \n  Brad Business generator Background Hey, I\u0026rsquo;m Brad. I\u0026rsquo;m working to establish myself in the insurance industry. At this point, I\u0026rsquo;m making as many connections as I can in my community looking for opportunities to bring new business to the agency.\n  Common roles  Producer Assistant    \nGoals\n Establish a book of business Take over an agency someday Look professional to clients Be a resource, not just a sales person   \nWorries\n Uncertainty Losing clients Missing opportunities Being prepared for what\u0026rsquo;s coming next   \n  Owen One-man team Background Hello, I\u0026rsquo;m Owen. I\u0026rsquo;ve learned everything I know about insurance through my 10 years of broker experience. My business is my top priority; I work all hours of the day to gain as many clients as possible. I recently hired someone to help out because my workload is so heavy, but I have no problem taking on the challenge.\n  Common roles  Business owner Broker Entrepreneur    \nGoals\n Be my own boss Stay profitable and afloat Have more time for new business development Grow enough to hire more employees when the time comes Compete with the big agencies   \nWorries\n Losing a client Having to compete with larger agencies with more resources Finding the next sale/client No time to develop a plan Compliance   \n "
},
{
	"uri": "http://zui.zywave.com/components/breadcrumbs/",
	"title": "Breadcrumbs",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat are breadcrumbs Use breadcrumbs as a form of secondary navigation, to aid the primary navigation, when sites hierarchies get 3 or more levels deep. Breadcrumbs give users context so they don’t feel lost, even when they are deep inside large, nested content. The breadcrumb links also allow users to backtrack through a deep navigation as far as they need to without having to start over.\n\nWhy use breadcrumbs  Simple, efficient, easy navigation within the application Fast navigation, one-click access to get to a higher-level page which helps users quickly get where they need to, even when they make mistakes Tells the user their location, helping them understand where they are in relation to the rest of the site   Using breadcrumbs For technical specs, see the specs page\n Breadcrumbs are always left-aligned and appear 30px below the page header and 20px above the page title Breadcrumbs should be styled like text links, but without the underline: 14px font size Use left arrows — not slashes or vertical lines — to imply movement between pages or point back home The current page should be included and clickable, but styled to look disabled When there are many pages in a breadcrumb trail, you may need to use an ellipsis to hide some of the crumbs. We recommend considering an ellipsis with 5 or more links in the breadcrumb trail. The ellipsis is clickable and will expand to reveal the hidden pages when clicked. In long breadcrumb trails, the breadcrumbs will stack when fully expanded, and that\u0026rsquo;s ok.   Naming  Breadcrumb titles will truncate after 30 characters We recommend keeping breadcrumb titles to 30 characters or less, especially in longer trails, but leave the length up to the consumer.   Mobile On mobile devices space is at a premium, use a single breadcrumb, pointing back one level. Since space is at such a premium on mobile applicatons, the cost of using breadcrumbs can quickly overwhelm the benefits. Keeping it simple, by using a single breadcrumb, avoids potential issues with wrapping multiple breadcrumbs or using breadcrumbs that are too small or crowded.\n\r\rTable of Contents  ZuiBreadcrumbs ZuiBreadcrumb  ZuiBreadcrumbs Extends ZuiBaseElement\nPass \u0026hellip; into . Rely on default slot but not applying a slot name. Do not use a slot name, zui-breadcrumbs logic will apply the appropriate slot=\u0026ldquo;first\u0026rdquo; to the first element (zui-breadcrumb) slotted in.\nZuiBreadcrumb Extends ZuiBaseElement\n\u0026rsquo;s are passed as a direct descendant into a  wrapper.  will accept and format correct styling for \u0026rsquo;s, \u0026rsquo;s and other slotted in elements. Choose your slotted in element based upon your use case needs. Typically if items can be opened in a new tab we suggest using an .\n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/components/buttons-dropdown/",
	"title": "Button dropdowns",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat are button dropdowns? Button dropdowns are buttons that reveal a list of actionable options.\nA button dropdown consists of two main parts:\n A button with a label that, when clicked, displays a list of options. The list of options which, when one is selected, executes an action.  When to use Button dropdowns are ideal for collapsing 3 or more options into a single button to conserve screen space.\nThey are most commonly seen within tables due to space restrictions, but they are not limited to tables.\nAlternate considerations  Use buttons if you have a smaller number of options and also want to present choices to users without hiding action options. Use a dropdown select if an option is not an action. A button dropdown should be used to execute an action, not to make a selection from a list.  Anatomy Button\nThe shape that encloses the label and chevron.\nThe dropdown buttons will always be ZUI Blue 500. Follow the button guidelines for sizing and spacing specifications.\nButton label\nText that defines what type of options are in the list.\nDropdown chevron\nThe action icon within the button that, when clicked, reveals the options list.\nOption list\nThe grouping of related actions the user can select.\nOption\nA unique action a user can select.\nSee base design specs\n  \nSizing and Spacing Use the following links to find exact pixel specs for button dropdowns.\nDropdown button design specs\nOrganizing the list Sort the list in a logical order. For instance, put the most selected option(s) at the top.\nUsing icons Icons may be used beside options; they should assist by making selection easier for users.\nSee icon design specs\nLabeling  The button label should be an umbrella action or category that encompasses all options in the list. After reading a label, the dropdown options should meet a user\u0026rsquo;s expectations.\n Use action verbs and clear verb phrases for your labels. For example, Save to indicates additional options are available, while Save does not.\n Use a dropdown button without a label to minimize footprint.\n Ideally, button dropdowns should be clearly labeled. If there are circumstances that prevent that from happening, use an icon that clearly and unambiguously represents its list. There may be situations where the list in the button dropdown is too varied for a clear and unambiguous icon. In these situations, consider other options before using a generic icon (like a chevron).\nSee unlabeled button dropdown design specs\n    \nBehavior Interaction behavior Buttons have their own unique behavior that indicates the user\u0026rsquo;s interaction resulted in a change. Button dropdowns follow the same guidelines as regular buttons when it comes to behavior and interaction. \nInput states\nSee button states design specs\n Option list states\nSee option list states design specs\n \n \r\rTable of Contents  ZuiButtonDropdown  Example open   ZuiButtonDropdown Extends ZuiBaseElement\nExample \u0026lt;zui-button-dropdown unresolved\u0026gt; Dropdown trigger \u0026lt;button slot=\u0026#34;option\u0026#34;\u0026gt;Option 1\u0026lt;/button\u0026gt; \u0026lt;button slot=\u0026#34;option\u0026#34;\u0026gt;Option 2\u0026lt;/button\u0026gt; \u0026lt;button slot=\u0026#34;option\u0026#34;\u0026gt;Option 3\u0026lt;/button\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; slot=\u0026#34;option\u0026#34;\u0026gt;Option 4\u0026lt;/a\u0026gt; \u0026lt;/zui-button-dropdown\u0026gt; open This attribute will decide whether the submenu is open or not\n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/components/buttons/",
	"title": "Buttons",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat is a link? What is a button? - Best practices Links and buttons are different technically, but they can look the same.\nWhat is a link?\nThe technical definition of a \u0026ldquo;link\u0026rdquo; \u0026lt;a\u0026gt; is an element that triggers a context switch. Meaning, it will take the user away from their current workflow and to a new location. For example: when we provide the users with a link to the help site, this takes them out of their current workflow and to a new location/workflow.\nTypically, you will see these links appear as a text link (plain, underlined text). However, there are instances where we may prefer to have a link displayed using one of our button styles. For example, we may have a link that we want to draw more attention to. This link might be styled as a button, but would take the user to a new workflow.\nWhat is a button?\nThe technical definition of a \u0026ldquo;button\u0026rdquo; \u0026lt;button\u0026gt; is an element that keeps the user within the same context. This action will keep the user within the same workflow.\nTypically, buttons will look like one of the various button styles we have listed below. In certain circumstances it may make more sense to have a button element styled to look like a text link. One great example of this is an action within a well. These actions could be defined as a link or a button depending on the circumstance, but they will always be styled to look like text regardless.\nBest practices - should it look like a button or should it look like a text link?\nIn MOST cases it should look like a text link when it appears within a body of text, and it should look like a button when it appears as an action independent of a body of text.\nIf you run into a situation where you are not sure, your decision should be based off the hierarchy of elements on the page. If a link element is very important and needs to stand out more, then consider styling it like a button. If a button element shouldn\u0026rsquo;t be drawing attention to itself, then perhaps a text link style would be best.\nAnatomy For detailed documentation on our button anatomy, view the ZUI button design specs.\nSizing and spacing\n Button height will always be 36px, button length is determined by the length of text. 8px padding above and below the text 15px padding to left and right of text 10px margin between buttons\n  Font\n System font, size 14px, semibold\n  Rounded corners\n The corners should always be rounded to create a half-circle effect. 50px corner radius should be used.   Style Variations Primary button\n A primary button is used to call attention to the main action a user should take on the page. Avoid using standard buttons within tables. Avoid using more than 1 primary button on a page if possible.\n  Secondary button\n A secondary button is used to represent a secondary action on a page. Secondary buttons can be used sparingly within tables.\n  Link button\nLink buttons can also be used to represent a secondary action on a page. At first glace these will appear as text, but the button shape will appear on hover/focus. This button shape will add extra padding around the text that isn\u0026rsquo;t noticeable at first. Because of this, we recommend trying to avoid using link buttons when they are left-aligned. \nIcon button\n Icon buttons can be used where text is not necessary to describe the action. The pencil icon for edit, trash can icon for delete, or printer icon for print are great examples of where an icon button would be appropriate. Icon buttons can appear in both primary, secondary and link button styles. Follow the guidelines for the button styles above to determine which one you should use. Icons should be sized to 16x16px with 10px padding around the icon to create a perfect circle.   Adding an icon to a button - when to use this option\nIn some cases it makes sense to include an icon with your text in a button. This should be used sparingly and only where drawing some extra attention to the button is appropriate. + Add is a great example.\nIcons should be sized to 16x16px and will always appear to the left of the text within the button. The margin between the icon and the text should be 10px. 15px padding should remain on the left and right side of the button. \nBlock-level buttons\nBlock-level buttons can be used to expand to the width of it\u0026rsquo;s containing element. These should be used when the containing element doesn\u0026rsquo;t span the full width of the page. Block-level buttons can be used to show more visual separation between elements or draw more attention to a smaller button that may otherwise be overlooked. The height should still remain 36px and font size should remain 14px. \nLoading button\nA loading button appears when the action does not take the user away from the current page, but the process that is kicked off prevents the user from taking additional action on the page. Other actions that cannot be taken while the process is loading should become disabled buttons.\nIN PROGESS New design/animation coming soon! \nText links\nText links, unlike link buttons, will appear as underlined text with no padding.\nButton States Normal\nNormal state is the initial state of the button when the page first loads and before any action is taken.\n\nHover\nHover state occurs when the user hovers over a button or link with their mouse.\n\nFocus\nFocus state appears when the button is currently selected and awaiting action. This commonly occurs when using a keyboard to navigate.\n\nPressed\nPressed state occurs when a user clicks (or hits enter on a keyboard). This state only appears briefly while the page/action is loading.\n\nDisabled\nDisable state occurs when an action currently isn\u0026rsquo;t available. Disabled buttons should only be used when an action can be taken within the current UI to enable the button. IF no action can be taken to enable the button, then the button should be hidden instead of disabled.\nWe have added the CSS property pointer-events: none; to this button style that will further prevent users from clicking a disabled button.  \nBlue background button states \nDark mode button states Button style best practices  Try to avoid using more than one primary button per page. If there are 3 buttons next to each other, try to only use 2 styles (for example: 1 primary and 2 link buttons) Primary buttons should never be used within a table. The preferred button style to use within a table is the link button.  \r\rTable of Contents  ZuiButton  Example disabled  ZuiFloatingActionButton  Example disabled   ZuiButton Extends ZuiBaseElement\nExample \u0026lt;zui-button\u0026gt; Add a contact \u0026lt;/zui-button\u0026gt; \u0026lt;zui-button class=\u0026#34;secondary\u0026#34;\u0026gt; \u0026lt;zui-icon icon=\u0026#34;zui-add\u0026#34;\u0026gt;\u0026lt;/zui-icon\u0026gt; Add a contact \u0026lt;/zui-button\u0026gt; \u0026lt;zui-button class=\u0026#34;icon-only\u0026#34;\u0026gt; \u0026lt;zui-icon icon=\u0026#34;zui-add\u0026#34;\u0026gt;\u0026lt;/zui-icon\u0026gt; \u0026lt;/zui-button\u0026gt; disabled Use this attribute when you want to disable zui-button\nZuiFloatingActionButton Extends ZuiBaseElement\nExample \u0026lt;zui-fab\u0026gt; \u0026lt;zui-icon icon=\u0026#34;zui-add\u0026#34;\u0026gt;\u0026lt;/zui-icon\u0026gt; \u0026lt;/zui-fab\u0026gt; disabled Use this attribute when you want to disable zui-fab\n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://zui.zywave.com/components/checkboxes/",
	"title": "Checkboxes",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat are checkboxes? Checkboxes are selection controls that allow the user to make multiple selections from a list of options. Unlike some other selection controls, checkboxes display all of the options, so the user has a chance to see all options before and while making their selections. They most commonly appear in forms, but sometimes they appear in other places in our products.\n * [Dropdown Select](/#components/dropdown-select) * [Pickers](/#components/pickers) * [Toggles](/#components/toggles) -- Types of checkboxes Standard These are the most common checkboxes. They allow the user to make selections and easily move on to the next task.\nMore details\n Gallery These checkboxes often feature an icon, and are generally used when they control the only selection the user can make on that page. More details\n \n  \n Standard checkboxes Overview Standard checkboxes are the most common checkboxes. They allow the user to make their selections and move on to the next task.\nBest practices:  Use when the number of options is easy for the user to process, generally fewer than 10. Unless you want to emphasize the selection, these are usually the checkboxes you should use.    All values are in pixels.\n\n\nStates Active  Selected: product color (typically 500 level) Unselected: ZUI Gray 500  Hover  Selected: product color (typically 400 level) Unselected: ZUI Gray 600  Disabled  Selected: ZUI Gray 300 Unselected: ZUI Gray 200    \n\n Gallery checkboxes Overview Gallery checkboxes are more prominent than standard checkboxes. They are generally used when they control the only selection the user can make on that page.\nBest practices:  Because they\u0026rsquo;re so large, they should generally be reserved for when that selection is the only one the user can make on that page. Icons both emphasize the selection and reinforce the contrast between the options.    All values are in pixels.\n\n\nStates Gray Background Unselected  Background color: White Font color: ZUI Gray 800 Font weight: 600 Dropshadow  Color: Black at 16% X-Axis: 0px Y-Axis: 1px Blur radius: 3px Spread radius: 0px   Hover  Background color: #FAFAFA Checkbox color: ZUI Gray 300 Font color: ZUI Gray 800 Font weight: 600 Dropshadow  Color: Black at 16% X-Axis: 0px Y-Axis: 3px Blur radius: 6px Spread radius: 0px   Selected  Border color: product color (typically 500 level) Background color: product color (typically 50 level) Checkbox color: product color (typically 500 level) Font color: ZUI Gray 800 Font weight: 600  Disabled  Background color: ZUI Gray 100 Illustration opacity: 50% Font color: ZUI Gray 300 Font weight: 600    Gallery checkboxes on a gray background.\n\n\nWhite Background Unselected  Border color: ZUI Gray 300 Background color: White Font color: ZUI Gray 800 Font weight: 600  Hover  Border color: ZUI Gray 300 Background color: #FAFAFA Checkbox color: ZUI Gray 300 Font color: ZUI Gray 800 Font weight: 600  Selected  Border color: product color (typically 500 level) Background color: product color (typically 50 level) Checkbox color: product color (typically 500 level) Font color: ZUI Gray 800 Font weight: 600  Disabled  Background color: ZUI Gray 100 Illustration opacity: 50% Font color: ZUI Gray 300 Font weight: 600    Gallery checkboxes on a white background.\n\n\n\r\rTable of Contents  ZuiCheckbox  Example checked   ZuiCheckbox Extends ZuiFormAssociatedElement\nExample \u0026lt;zui-checkbox checked\u0026gt;\u0026lt;/zui-checkbox\u0026gt; checked Whether or not the checkbox is checked\n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/foundations/colors/",
	"title": "Colors",
	"tags": [],
	"description": "",
	"content": "  /* Primary branding colors */ .primary-branding-colors { display: flex; width: 100%; text-transform: uppercase; margin-bottom: 3rem; } .primary-branding-colors  div { display: flex; flex-direction: column; height: 15rem; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.18); } .primary-zywave { flex: 1; color: #ffffff; background: var(--zui-zywave); } .primary-blue { flex: 2; color: #ffffff; background: var(--zui-blue); margin: 0 1rem; } .primary-branding-colors .label { padding: 0.5rem; } .primary-branding-colors .levels { margin-top: auto; } .primary-branding-colors .hex { font-weight: 700; text-align: right; padding: 0.5rem; margin-top: auto; } .primary-branding-colors .levels .zui-blue { display: flex; } .primary-branding-colors .levels .zui-blue  div { flex: 1; } .primary-branding-colors .levels .zui-blue  div  .color { width: 100%; height: 5rem; } .primary-content { display: flex; flex-direction: column; flex: 1; } .primary-background { flex: 1; background: var(--zui-gray-50); } .primary-surface { flex: 1; background: white; } .primary-text { flex: 1; color: #ffffff; background: var(--zui-gray-800); } /* Expanded color palette */ table[class^=zui], table[class^=zui] td { border: 0; box-shadow: none; } table[class^=zui] td { padding: 0.5rem; } .level-500 { font-weight: 700; } .header { font-weight: 600; border-bottom: 1px solid var(--zui-gray-100); } .color-title .title { text-transform: uppercase; border-bottom: 3px solid var(--zui-gray-200); } .color-title .title h3 { margin-bottom: 0; } table[class^=zui] td { border-left: 1px solid var(--zui-gray-100); text-transform: uppercase; } table[class^=zui] td:first-child { border-left: 0; } table[class^=zui] td.color { width: 6.25rem; } /* ZUI Blue */ .zui-blue .level-100 .color { background: var(--zui-blue-100); } .zui-blue .level-200 .color { background: var(--zui-blue-200); } .zui-blue .level-300 .color { background: var(--zui-blue-300); } .zui-blue .level-400 .color { background: var(--zui-blue-400); } .zui-blue .level-500 .color { background: var(--zui-blue-500); } .zui-blue .level-600 .color { background: var(--zui-blue-600); } .zui-blue .level-700 .color { background: var(--zui-blue-700); } /* ZUI Green */ .zui-green .level-100 .color { background: var(--zui-green-100); } .zui-green .level-200 .color { background: var(--zui-green-200); } .zui-green .level-300 .color { background: var(--zui-green-300); } .zui-green .level-400 .color { background: var(--zui-green-400); } .zui-green .level-500 .color { background: var(--zui-green-500); } .zui-green .level-600 .color { background: var(--zui-green-600); } .zui-green .level-700 .color { background: var(--zui-green-700); } /* ZUI Aqua */ .zui-aqua .level-100 .color { background: var(--zui-aqua-100); } .zui-aqua .level-200 .color { background: var(--zui-aqua-200); } .zui-aqua .level-300 .color { background: var(--zui-aqua-300); } .zui-aqua .level-400 .color { background: var(--zui-aqua-400); } .zui-aqua .level-500 .color { background: var(--zui-aqua-500); } .zui-aqua .level-600 .color { background: var(--zui-aqua-600); } .zui-aqua .level-700 .color { background: var(--zui-aqua-700); } /* ZUI Purple */ .zui-purple .level-100 .color { background: var(--zui-purple-100); } .zui-purple .level-200 .color { background: var(--zui-purple-200); } .zui-purple .level-300 .color { background: var(--zui-purple-300); } .zui-purple .level-400 .color { background: var(--zui-purple-400); } .zui-purple .level-500 .color { background: var(--zui-purple-500); } .zui-purple .level-600 .color { background: var(--zui-purple-600); } .zui-purple .level-700 .color { background: var(--zui-purple-700); } /* ZUI Rose */ .zui-rose .level-100 .color { background: var(--zui-rose-100); } .zui-rose .level-200 .color { background: var(--zui-rose-200); } .zui-rose .level-300 .color { background: var(--zui-rose-300); } .zui-rose .level-400 .color { background: var(--zui-rose-400); } .zui-rose .level-500 .color { background: var(--zui-rose-500); } .zui-rose .level-600 .color { background: var(--zui-rose-600); } .zui-rose .level-700 .color { background: var(--zui-rose-700); } /* ZUI Red */ .zui-red .level-100 .color { background: var(--zui-red-100); } .zui-red .level-200 .color { background: var(--zui-red-200); } .zui-red .level-300 .color { background: var(--zui-red-300); } .zui-red .level-400 .color { background: var(--zui-red-400); } .zui-red .level-500 .color { background: var(--zui-red-500); } .zui-red .level-600 .color { background: var(--zui-red-600); } .zui-red .level-700 .color { background: var(--zui-red-700); } /* ZUI Orange */ .zui-orange .level-100 .color { background: var(--zui-orange-100); } .zui-orange .level-200 .color { background: var(--zui-orange-200); } .zui-orange .level-300 .color { background: var(--zui-orange-300); } .zui-orange .level-400 .color { background: var(--zui-orange-400); } .zui-orange .level-500 .color { background: var(--zui-orange-500); } .zui-orange .level-600 .color { background: var(--zui-orange-600); } .zui-orange .level-700 .color { background: var(--zui-orange-700); } /* ZUI Yellow */ .zui-yellow .level-100 .color { background: var(--zui-yellow-100); } .zui-yellow .level-200 .color { background: var(--zui-yellow-200); } .zui-yellow .level-300 .color { background: var(--zui-yellow-300); } .zui-yellow .level-400 .color { background: var(--zui-yellow-400); } .zui-yellow .level-500 .color { background: var(--zui-yellow-500); } .zui-yellow .level-600 .color { background: var(--zui-yellow-600); } .zui-yellow .level-700 .color { background: var(--zui-yellow-700); } /* ZUI Gray */ .zui-gray .level-25 .color { background: var(--zui-gray-25); } .zui-gray .level-50 .color { background: var(--zui-gray-50); } .zui-gray .level-100 .color { background: var(--zui-gray-100); } .zui-gray .level-200 .color { background: var(--zui-gray-200); } .zui-gray .level-300 .color { background: var(--zui-gray-300); } .zui-gray .level-400 .color { background: var(--zui-gray-400); } .zui-gray .level-500 .color { background: var(--zui-gray-500); } .zui-gray .level-600 .color { background: var(--zui-gray-600); } .zui-gray .level-700 .color { background: var(--zui-gray-700); } .zui-gray .level-800 .color { background: var(--zui-gray-800); } .zui-gray .level-900 .color { background: var(--zui-gray-900); } /* A11y swatches */ .a11y-swatch { background: var(--zui-gray-100); box-shadow: 0 1px 3px rgba(0, 0, 0, 0.18); } .a11y-swatch .color { display: flex; align-items: flex-end; justify-content: center; } .a11y-swatch .color  div { display: flex; flex-direction: column; flex: 1; margin-top: 3rem; text-align: center; } .a11y-swatch .a { padding: 0.5rem; } .a11y-swatch .large { font-size: 1.4rem; } .a11y-swatch .small { font-size: 1.2rem; } .a11y-swatch .bold { font-weight: 600; } .a11y-swatch .white { color: white; } .a11y-swatch .rating { padding: 0.5rem; text-transform: uppercase; color: var(--zui-gray-800); background: white; } .a11y-swatch .details { padding: 1rem; text-transform: uppercase; background: var(--zui-gray-50); } .a11y-swatch .details .hex { font-weight: 600; } .zui-zywave .color { background: var(--zui-zywave); } .zui-blue-100 .color { background: var(--zui-blue-100); } .zui-blue-200 .color { background: var(--zui-blue-200); } .zui-blue-300 .color { background: var(--zui-blue-300); } .zui-blue-400 .color { background: var(--zui-blue-400); } .zui-blue-500 .color { background: var(--zui-blue-500); } .zui-blue-600 .color { background: var(--zui-blue-600); } .zui-blue-700 .color { background: var(--zui-blue-700); } .zui-green-100 .color { background: var(--zui-green-100); } .zui-green-200 .color { background: var(--zui-green-200); } .zui-green-300 .color { background: var(--zui-green-300); } .zui-green-400 .color { background: var(--zui-green-400); } .zui-green-500 .color { background: var(--zui-green-500); } .zui-green-600 .color { background: var(--zui-green-600); } .zui-green-700 .color { background: var(--zui-green-700); } .zui-aqua-100 .color { background: var(--zui-aqua-100); } .zui-aqua-200 .color { background: var(--zui-aqua-200); } .zui-aqua-300 .color { background: var(--zui-aqua-100); } .zui-aqua-100 .color { background: var(--zui-aqua-300); } .zui-aqua-400 .color { background: var(--zui-aqua-400); } .zui-aqua-500 .color { background: var(--zui-aqua-500); } .zui-aqua-600 .color { background: var(--zui-aqua-600); } .zui-aqua-700 .color { background: var(--zui-aqua-700); } .zui-purple-100 .color { background: var(--zui-purple-100); } .zui-purple-200 .color { background: var(--zui-purple-200); } .zui-purple-300 .color { background: var(--zui-purple-300); } .zui-purple-400 .color { background: var(--zui-purple-400); } .zui-purple-500 .color { background: var(--zui-purple-500); } .zui-purple-600 .color { background: var(--zui-purple-600); } .zui-purple-700 .color { background: var(--zui-purple-700); } .zui-rose-100 .color { background: var(--zui-rose-100); } .zui-rose-200 .color { background: var(--zui-rose-200); } .zui-rose-300 .color { background: var(--zui-rose-300); } .zui-rose-400 .color { background: var(--zui-rose-400); } .zui-rose-500 .color { background: var(--zui-rose-500); } .zui-rose-600 .color { background: var(--zui-rose-600); } .zui-rose-700 .color { background: var(--zui-rose-700); } .zui-red-100 .color { background: var(--zui-red-100); } .zui-red-200 .color { background: var(--zui-red-200); } .zui-red-300 .color { background: var(--zui-red-300); } .zui-red-400 .color { background: var(--zui-red-400); } .zui-red-500 .color { background: var(--zui-red-500); } .zui-red-600 .color { background: var(--zui-red-600); } .zui-red-700 .color { background: var(--zui-red-700); } .zui-orange-100 .color { background: var(--zui-orange-100); } .zui-orange-200 .color { background: var(--zui-orange-200); } .zui-orange-300 .color { background: var(--zui-orange-300); } .zui-orange-400 .color { background: var(--zui-orange-400); } .zui-orange-500 .color { background: var(--zui-orange-500); } .zui-orange-600 .color { background: var(--zui-orange-600); } .zui-orange-700 .color { background: var(--zui-orange-700); } .zui-yellow-100 .color { background: var(--zui-yellow-100); } .zui-yellow-200 .color { background: var(--zui-yellow-200); } .zui-yellow-300 .color { background: var(--zui-yellow-300); } .zui-yellow-400 .color { background: var(--zui-yellow-400); } .zui-yellow-500 .color { background: var(--zui-yellow-500); } .zui-yellow-600 .color { background: var(--zui-yellow-600); } .zui-yellow-700 .color { background: var(--zui-yellow-700); }  Color palette goals  Create a cohesive look across the entire suite of products Meet AA standards for WCAG Shades to be based off of percentages for ease of use within code Have a vibrant secondary palette for improved illustrations Consistent usage of one primary color throughout all products  Primary Branding Colors Zywave Green #5FB53B  Blue 500 #2777d3                Background #f4f4f6  Surface #ffffff  Text #31313a    Zywave Green\nZywave green will remain our brand color to ensure continued recognition. However, the usage will be minimal within products. New usage guidelines should be put in place.\nBlue 500\nAll products will take on the Blue 500 creating a consistent look across our entire suite of products. This blue was chosen for a number of reasons\nBackground, Surface and Text Colors\nThese colors will also be updated to match the new palette\n Background - Gray 50 or #F4F4F6 Surface - White or #FFFFFF Text - Gray 800 or #31313A  Expanded Color Palette The expanded palette should be used in illustrations and other minor places throughout the UI that bring attention to certain elements. Meaning is assigned to certain colors that should be considered when using the color in illustrations and throughout the UI.\nGray is used in a variety of places throughout our products and is often used to create subtle variations in shade and therefore has an larger palette compared to the other secondary colors.\nWe have updated the color palette to use the HSL color system in order to maintain some of the saturation throughout each palette. With this update, only the lightness value will increase/decrease by 10% for each tint/shade of a color. Below are listed the HEX color values\nBlue   Level Color HEX HSL RGB CSS variable  100  #D0E2F6 (212, 69%, 89%) (208, 226, 246) --zui-blue-100  200  #A5C7EE (212, 69%, 79%) (165, 199, 238) --zui-blue-200  300  #79ACE6 (212, 69%, 69%) (121, 172, 230) --zui-blue-300  400  #4E92DF (212, 69%, 59%) (78, 146, 223) --zui-blue-400  500  #2777D3 (212, 69%, 49%) (39, 119, 211) --zui-blue-500  600  #1F5EA8 (212, 69%, 39%) (31, 95, 168) --zui-blue-600  700  #17477D (212, 69%, 29%) (23, 71, 125) --zui-blue-700    Green   Level Color HEX HSL RGB CSS Variable  100  #B8E2A6 (102, 51%, 77%) (215, 239, 205) --zui-green-100  200  #B8E2A6 (102, 51%, 77%) (184, 226, 166) --zui-green-200  300  #9AD680 (102, 51%, 67%) (154, 214, 128) --zui-green-300  400  #7BC959 (102, 51%, 57%) (123, 201, 89) --zui-green-400  500  #5FB53B (102, 51%, 47%) (95, 181, 59) --zui-green-500  600  #4B8E2E (102, 51%, 37%) (75, 142, 46) --zui-green-600  700  #376822 (102, 51%, 27%) (55, 104, 34) --zui-green-700     Aqua   Level Color HEX HSL RGB CSS Variable  100  #C6F0EE (167, 59%, 86%) (198, 240, 238) --zui-aqua-100  200  #9EE6E1 (167, 59%, 76%) (158, 230, 225) --zui-aqua-200  300  #75DBD5 (167, 59%, 66%) (117, 219, 213) --zui-aqua-300  400  #4DD1C8 (167, 59%, 56%) (77, 209, 200) --zui-aqua-400  500  #30BBB1 (167, 59%, 46%) (48, 187,177) --zui-aqua-500  600  #26928B (167, 59%, 36%) (38, 146, 139) --zui-aqua-600  700  #1B6964 (167, 59%, 26%) (27, 105, 100) --zui-aqua-700    Purple   Level Color HEX HSL RGB CSS Variable  100  #E0D7EF (263, 42%, 89%) (224, 215, 239) --zui-purple-100  200  #C4B3E0 (263, 42%, 79%) (196, 179, 224) --zui-purple-200  300  #A88FD1 (263, 42%, 69%) (168, 143, 209) --zui-purple-300  400  #8C6BC2 (263, 42%, 59%) (140, 107, 194) --zui-purple-400  500  #6F48B0 (263, 42%, 49%) (113, 72, 177) --zui-purple-500  600  #5A3A8D (263, 42%, 39%) (90, 58, 141) --zui-purple-600  700  #432B69 (263, 42%, 29%) (67, 43, 105) --zui-purple-700     Rose   Level Color HEX HSL RGB CSS Variable  100  #F3CEE5 (323, 60%, 88%) (243, 206, 229) --zui-rose-100  200  #E9A5CF (323, 60%, 78%) (233, 165, 207) --zui-rose-200  300  #DE7CB9 (323, 60%, 68%) (222, 124, 185) --zui-rose-300  400  #D454A3 (323, 60%, 58%) (212, 84, 163) --zui-rose-400  500  #C6318C (323, 60%, 48%) (196, 49, 140) --zui-rose-500  600  #9B276E (323, 60%, 38%) (155, 39, 110) --zui-rose-600  700  #721D51 (323, 60%, 28%) (114, 29, 81) --zui-rose-700    Red   Level Color HEX HSL RGB CSS Variable  100  #FAC9BD (12, 85%, 86%) (250, 201, 189) --zui-red-100  200  #F6A38E (12, 85%, 76%) (246, 163, 142) --zui-red-200  300  #F27C5F (12, 85%, 66%) (242, 124, 95) --zui-red-300  400  #EE562F (12, 85%, 56%) (238, 86, 47) --zui-red-400  500  #D93911 (12, 85%, 46%) (217, 57, 18) --zui-red-500  600  #AA2D0E (12, 85%, 36%) (170, 45, 14) --zui-red-600  700  #7B200A (12, 85%, 26%) (123, 32, 10) --zui-red-700     Orange   Level Color HEX HSL RGB CSS Variable  100  #FDE5D3 (25, 90%, 91%) (253, 229, 211) --zui-orange-100  200  #FAC7A3 (25, 90%, 81%) (250, 199, 163) --zui-orange-200  300  #F8AA72 (25, 90%, 71%) (248, 170, 114) --zui-orange-300  400  #F58D42 (25, 90%, 61%) (245, 141, 66) --zui-orange-400  500  #F36F12 (25, 90%, 51%) (243, 111, 18) --zui-orange-500  600  #C7590A (25, 90%, 41%) (199, 89, 10) --zui-orange-600  700  #964308 (25, 90%, 31%) (150, 67, 8) --zui-orange-700    Yellow   Level Color HEX HSL RGB CSS Variable  100  #FEF1D7 (40, 97%, 92%) (254, 241, 215) --zui-yellow-100  200  #FEE0A5 (40, 97%, 82%) (254, 224, 165) --zui-yellow-200  300  #FDCF72 (40, 97%, 72%) (253, 207, 114) --zui-yellow-300  400  #FCBD40 (40, 97%, 62%) (252, 189, 64) --zui-yellow-400  500  #FBAC0E (40, 97%, 52%) (251, 172, 14) --zui-yellow-500  600  #D38E03 (40, 97%, 42%) (211, 142, 3) --zui-yellow-600  700  #A16C02 (40, 97%, 32%) (161, 108, 2) --zui-yellow-700     Gray   Level Color HEX HSL RGB CSS Variable  25  #F9F9FA (240, 8%, 98%) (249, 249, 250) --zui-gray-25  50  #F4F4F6 (240, 8%, 96%) (244, 244, 246) --zui-gray-50  100  #E6E6EA (240, 8%, 91%) (230, 230, 234) --zui-gray-100  200  #CBCBD2 (240, 8%, 81%) (203, 203, 210) --zui-gray-200  300  #AFAFBB (240, 8%, 71%) (175, 175, 187) --zui-gray-300  400  #9494A4 (240, 8%, 61%) (148, 148, 164) --zui-gray-400  500  #78788C (240, 8%, 51%) (120, 120, 140) --zui-gray-500  600  #606071 (240, 8%, 41%) (96, 96, 113) --zui-gray-600  700  #494955 (240, 8%, 31%) (73, 73, 85) --zui-gray-700  800  #31313A (240, 8%, 21%) (49, 49, 58) --zui-gray-800  900  #1A1A1E (240, 8%, 11%) (26, 26, 30) --zui-gray-900     Zywave Green Usage Guidelines Zywave green still remains the main branding color of the company. It is how we\u0026rsquo;ve been recognized in the past and how we will continue to be recognized in the future. The way this color can be used within our products has changed, however, so that our products meet accessibility guidelines and we have more product branding consistency across all platforms.\nWhere should I use Zywave Green?\n Zywave logo Public facing materials Anything not a product to be branded as Zywave such as training materials/handouts and presentations  How should I use Zywave Green?\n As an accent color to highlight elements throughout a design For elements that do not contain text on top of the green color  What should I avoid?\n If possible, avoid using it for elements that contain text such as buttons or text boxes  If you need to use it for an element with text, NEVER use a font smaller than 19px Bold or 24px Regular  Do not use for large lements taht take up a lot of space on the page. Instead, use it as an accent color to draw attention to certain elements.  DO   DO NOT \n\n Blue Usage Guidelines Blue 500 will take over as the branding color within all of our products.\nWhere should I use Blue 500?\nThe following components will adopt the blue color within our products. This list will change as ZUI continues to evolve.\n App Bar Buttons and text links Progress indicators Date pickers Radio buttons Tabs Pagination Popovers  How should I use it?\n As the main color used within our suite of products To create visual hierarchy within the UI and attract users to their next action  What should I avoid?\n Using it for large elements that take up a lot of space on the page. Instead it should be used as an accent color to draw attention to elements and guide the user through different pages. Creating a \u0026ldquo;sea of blue\u0026rdquo; by highlighting too many actions on one page.  Color accessibility ALL text on a colored background should meet a minimum of AA standards. Refer to the guidelines below for usage of GRAY 800 and WHITE text on each color. The pass/fail rating is the same when using colored text on a WHITE or GRAY 800 background.\nSmall text = 19px/1.2em bold or smaller - OR - 24px/1.5em regular or smaller\nLarge text = 19px/1.2em bold or larger - OR - 24px1.5em regular or larger\nZywave Green\n A Pass   A Fail   A Pass   A Pass   Zywave Green #5FB53B   \n\n Blue The color blue is primarily used to guide the user throughout the UI. It is often used to share information or general notifications as well. Since Blue 500 is our primary product color it will be used frequently throughout many different components. Follow the Blue usage guidelines.\n A Pass   A Pass   A Fail   A Fail   Blue 100 #D0E2F6     A Pass   A Pass   A Fail   A Fail   Blue 200 #A5C7EE  \n  A Pass   A Fail   A Pass   A Fail   Blue 300 #79ACE6  \n  A Fail   A Fail   A Pass   A Pass   Blue 400 #4E92DF  \n\n  A Fail   A Fail   A Pass   A Pass   Blue 500 #2777D3     A Fail   A Fail   A Pass   A Pass   Blue 600 #1F5EA8  \n  A Fail   A Fail   A Pass   A Pass   Blue 700 #17477D  \n\n\n Green Green means success! It should be used to notify the user that they have completed something successfully.\nGreen 500 will often appear in components such as notifiers, wells and dialogues. It will also frequently appear in icons/illustrations to confirm that something was successful.\n A Pass   A Pass   A Fail   A Fail   Green 100 #d7efcd     A Pass   A Pass   A Fail   A Fail   Green 200 #b8e2a6  \n  A Pass   A Pass   A Fail   A Fail   Green 300 #9ad680  \n  A Pass   A Pass   A Fail   A Fail   Green 400 #7bc959  \n\n  A Pass   A Pass   A Fail   A Fail   Green 500 #5fb53b     A Pass   A Fail   A Pass   A Fail   Green 600 #4b8e2e  \n  A Fail   A Fail   A Pass   A Pass   Green 700 #376822  \n\n\n Aqua Often associated with feelings such as refreshing, energy, sophistication and creativity, Aqua can be used in illustrations or as an accent color to add a bright splash of color and lightness.\n A Pass   A Pass   A Fail   A Fail   Aqua 100 #c6f0ee     A Pass   A Pass   A Fail   A Fail   Aqua 200 #9ee6e1  \n  A Pass   A Pass   A Fail   A Fail   Aqua 300 #7cddd6  \n  A Pass   A Pass   A Fail   A Fail   Aqua 400 #4d1c8  \n\n  A Pass   A Pass   A Fail   A Fail   Aqua 500 #30bbb1     A Pass   A Fail   A Pass   A Fail   Aqua 600 #26928b  \n  A Fail   A Fail   A Pass   A Pass   Aqua 700 #1b6964  \n\n\n Purple Purple\u0026rsquo;s primary placement in our products will be visited text links. However, it can also be used within illustrations/icons to add depth or a rich pop of color. Purple is often associated with royalty, power and wealth.\n A Pass   A Pass   A Fail   A Fail   Purple 100 #e0d7ef     A Pass   A Pass   A Fail   A Fail   Purple 200 #C4B3E0  \n  A Pass   A Pass   A Fail   A Fail   Purple 300 #A88FD1  \n  A Pass   A Fail   A Pass   A Fail   Purple 400 #8C6BC2  \n\n  A Fail   A Fail   A Pass   A Pass   Purple 500 #6F48B0     A Fail   A Fail   A Pass   A Pass   Purple 600 #5A3A8D  \n  A Fail   A Fail   A Pass   A Pass   Purple 700 #432B69  \n\n\n Rose Often viewed as very feminine, pink can be used to add softness/playfulness to illustrations and icons.\n A Pass   A Pass   A Fail   A Fail   Rose 100 #F3CEE5     A Pass   A Pass   A Fail   A Fail   Rose 200 #E9A5CF  \n  A Pass   A Pass   A Fail   A Fail   Rose 300 #DE7CB9  \n  A Pass   A Fail   A Pass   A Fail   Rose 400 #D454A3  \n\n  A Fail   A Fail   A Pass   A Pass   Rose 500 #C6318C     A Fail   A Fail   A Pass   A Pass   Rose 600 #9B276E  \n  A Fail   A Fail   A Pass   A Pass   Rose 700 #721D51  \n\n\n Red Red is primarily used to signify some sort of error or destructive action. It is used to draw the users\u0026rsquo; attention to important information that could possibly disrupt their workflow.\nThe color RED 500 is used in components like notifiers, wells, dialogues, text links and buttons.\nThe meaning behind the color red should be highly considered when using it within any illustrations.\n A Pass   A Pass   A Fail   A Fail   Red 100 #FAC9BD     A Pass   A Pass   A Fail   A Fail   Red 200 #F6A38E  \n  A Pass   A Pass   A Fail   A Fail   Red 300 #F27C5F  \n  A Pass   A Fail   A Pass   A Fail   Red 400 #EE562F  \n\n  A Fail   A Fail   A Pass   A Pass   Red 500 #D93911     A Fail   A Fail   A Pass   A Pass   Red 600 #AA2D0E  \n  A Fail   A Fail   A Pass   A Pass   Red 700 #7B200A  \n\n\n Orange Orange radiates warmth and happiness. It is a very energizing color and it is often associated with creativity, balance and health.\n A Pass   A Pass   A Fail   A Fail   Orange 100 #FDE5D3     A Pass   A Pass   A Fail   A Fail   Orange 200 #FAC7A3  \n  A Pass   A Pass   A Fail   A Fail   Orange 300 #F8AA72  \n  A Pass   A Pass   A Fail   A Fail   Orange 400 #F58D42  \n\n  A Pass   A Fail   A Fail   A Fail   Orange 500 #F36F12     A Fail   A Fail   A Pass   A Fail   Orange 600 #C7590A  \n  A Fail   A Fail   A Pass   A Pass   Orange 700 #964308  \n\n\n Yellow Yellow indicates a warning. It is used to draw the users attention to caution them before they proceed. It can also be used to inform users that a change has been made on their behalf.\nYellow 500 can be found in components like wells, dialogues and notifiers.\n A Pass   A Pass   A Fail   A Fail   Yellow 100 #FEF1D7     A Pass   A Pass   A Fail   A Fail   Yellow 200 #FEE0A5  \n  A Pass   A Pass   A Fail   A Fail   Yellow 300 #FDCF72  \n  A Pass   A Pass   A Fail   A Fail   Yellow 400 #FCBD40  \n\n  A Pass   A Pass   A Fail   A Fail   Yellow 500 #FBAC0E     A Pass   A Pass   A Fail   A Fail   Yellow 600 #D38E03  \n  A Fail   A Fail   A Pass   A Pass   Yellow 700 #A16C02  \n\n\nColor meanings Certain colors will have meanings assigned to them. These meanings should be considered when using the color in any illustrations or marketing materials as well.\n    Color Meanings associated with color Where is it used in the UI?      Red 500 Error, Delete, Failed  Error/Failure wells, dialogs and notifiersSystem icons or illustrations indicating error/delete/failureDelete button or link    Green 500 Success, Confirm Success wells, dialogs, notifiersConfirm wells, dialogs, notifiersSystem icons or illustrations indicating success or confirm    Yellow 500 Caution, Warning, Change(s) made Caution/warning wells, dialogs, notifiersWells, dialogs, notifiers indicating a change has been made on the users\u0026rsquo; behalf    Blue 500 Information, notification, link, in-progress Information wells, dialogs, notifiers Icons or illustrations used to inform the user or signify something is in progressText links    Gray 200 Disabled/Unavailable Disabled buttons or linksunavailable items in a dropdown selector    Purple 500 Visited link Visited links    "
},
{
	"uri": "http://zui.zywave.com/foundations/content-area/",
	"title": "Content area",
	"tags": [],
	"description": "",
	"content": " Basics The standard content area is the the body of our applications where all the the features and funcionality gets placed. When building features in our applications it\u0026rsquo;s important to understand the size of the canvas you\u0026rsquo;ll be building on. A user should always understand the boundaries of our application, so the standard content area should not change from page to page.\nStandard padding Common page padding is important to keep the content in one place and give it some breathing room. Padding is automatically added to our standard content area. Depending on the size of the viewport, there may be more or less padding. The amount of padding added is dependant on breakpoints. Here is a list of padding that is applied at each breakpoint.\nView padding specs\n   Breakpoints* Padding Notes     ≤30em or ≤480px 20px Side navigation hides; mobile menu becomes available   ≤45em or ≤720px 20px Collapsed side navigation appears   ≤60em or ≤960px 20px    ≤64em or ≤1024px 20px Side navigation collapses   ≤80em or ≤1280px 30px    ≤90em or ≤1440px 30px    ≤120em or ≤1920px 30px    ≤160em or ≤2560px 30px     *em units are based off the browser\u0026rsquo;s default font size of 16px\nContent area max-width Standard max-width In most cases the content on the page should fill the full width of the content area, stretching end to end of the available screen real estate leaving room for only standard padding. However, enforce a max-width of 1600px as the viewport gets larger. For good user experience, it is typically not helpful to continue stretching past our recommended max-width. In cases where the content doesn\u0026rsquo;t need to be stretched or would be more appealing at a smaller size, use the max-width of 900px.\nOur standard content area max-width is: 1600px or 100em\nView standard max-width specs\nComponent specific max-width In special cases, a component should not fill the full width of the content area, instead it should stop at a specific width to ensure good user experience. Enforcing these max-widths will allow the user to read and understand information easier than if the component was stretched.\nComponents with an enforced max-width should remain the same size when the content area grows wider to suit a larger viewport. However, once a component\u0026rsquo;s max-width reaches the limit of the content area max-width, it should stop growing to not overflow.\nView component specific max-width specs\nCards Depending on content within Cards, and the rest of the components on the page, Cards can have two different max-widths; either 900px or 1600px (regarded as full-width). 900px width means that the Cards and all components on the page extend to a max-width of only 900px and then stop growing. 1600px width means that the page components are full-width, padding still in effect, on the page until they hit 1600px then stop growing.\nBecause Cards can hold a variety of different components and content, all specific max-widths still apply. For example, because a Text Input has a max-width of 730px, this will remain in effect in larger card sizes even though there may be empty space.\nView card max-width specs\n   Breakpoints* Content width Notes     ≤30em or ≤480px full-width 440px Side navigation hides; mobile menu becomes available   ≤45em or ≤720px full-width 430px Collapsed side navigation appears   ≤60em or ≤960px full-width 670px    ≤64em or ≤1024px full-width 734px Side navigation collapses   ≤80em or ≤1280px 900px/full-width 970px    ≤90em or ≤1440px 900px/full-width 1130px    ≤120em or ≤1920px 900px/1600px    ≤160em or ≤2560px 900px/1600px     *em units are based off the browser\u0026rsquo;s default font size of 16px\nText areas Studies have shown that between 45 to 75 characters per single line of text is the optimal length for reading. Anything shorter than this can cause the readers\u0026rsquo; eyes to bounce around too much. Anything longer and the reader can become fatigued and lose their place when moving to the beginning of the next line. Depending on font type and size, this character length equates to about 700 pixels in width. Meaning that when there is a Text Area on the page or within a card, the max-width of that area should be 700px. Regardless of card size, ranging from 900px to full-width (up to 1600px), the Text Area should never be larger than 700px and be left-aligned with the card.\nText inputs Using the same studies and conclusion as Text Areas, Text Inputs should also have a max-width of 700px for a single line of text. There is also 15px of interior left and right padding within Text Inputs, therefore the max-width of a text input should overall equal 730px. Meaning that when there is a Text Input on the page or within a card, the max-width of that input should be 730px. Regardless of card size, ranging from 900px to full-width (up to 1600px), the Text Input should never be larger than 730px.\nView text standards\nView form standards\nTables Tables can have a large amount of information, options, and details within them; because of this, it is acceptable that they expand to the full 1600px width of the page where applicable.\nContent area best practices Even though there may be empty space within components such as cards, all components on a page or in a workflow should always follow these rules. This will allow the user to move between pages easily visually because the components and pages are not jumping sizes to react to the content within.\nDO  When adding a form, make sure that it meets our max-width standards. When the content area is 900px and below, the form must always be full-width. When the content area is between 900px and 1600px, the form must be either 900px or full-width. When the content area is larger than 1600px, the form must be either 900px or 1600px.\n\nDO NOT  There should never be a situation where the form is smaller than 900px or full-width when the content area is larger than 900px.\n\n DO  When adding multiple components to a page or within the same workflow, all elements should have the same width.\n\nDO NOT  There should never be a situation where a form has a max-width of 900px, and a table below it is full-width.\n\n Background coloring Grey and white background colors are available, depending on the situation.\nWhen to use a grey Background\nFor most applications, our standard is to use a grey background. We use grey because it creates a base layer we can build off of and highlight, allowing the user to to focus on the task at hand. Most of our components and containers are specifically built to help draw the users attention and a grey background helps with that.\nWhen to use a white Background\nUse a white background when the content is mainly text based to enhance readability.\n "
},
{
	"uri": "http://zui.zywave.com/developers/contribution-guide/",
	"title": "Contribution guide",
	"tags": [],
	"description": "",
	"content": " ZUI has a series of automated systems that ensure we are able to easily release packages whenever we need to, and properly communicate the impact of those changes to developers. For this to work properly, we have some rules around how to help.\n Branching ZUI operates with two main branches in mind:\n dev:  This branch should always be in a state where it can reasonably be merged into master and ready to go at any time. All active development should be done to branches made off of dev. No code push should ever be made direct to dev. Only merges. Prerelease versions (suffixed with -pre) are created out of this branch.  master:  This branch is always the stable version of ZUI. Full stable releases are made out of this branch. Only merges from dev are allowed to get changes into master.  other branches:  Call them something easy to understand (not just \u0026ldquo;fix-stuff\u0026rdquo;) Delete them when they are merged into dev (no need for other persistent branches)   Commiting ZUI uses lerna for CI operations across the entire monorepo. There\u0026rsquo;s two things to note:\n On commit, a precommit hook is executed that will lint (and fix if possible) all staged files about to be committed.  JS: uses eslint + prettier CSS/SCSS: uses stylelint + prettier If the linter doesn\u0026rsquo;t run, and you have formatting or linting errors, the CI will fail  On versioning, commit messages are evaluated by lerna\u0026rsquo;s hook with conventional-changelog to autoincrement versions  This is super important, and is something you should actively follow to help keep the versions and CHANGELOGs up-to-date    Conventional commits Recommended links:\n Conventional commits Angular commit standards  All commits should look like the following:\n\u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; The most important part, for us, is type (which is parsed from the commit message).\n✔ Good:\n\u0026gt; git commit -m \u0026#34;chore: fixing some ci issues\u0026#34; \u0026gt; git commit -m \u0026#34;feat: wells now support \u0026#39;dismissible\u0026#39; feature ❌ Bad:\n\u0026gt; git commit -m \u0026#34;pat is dumb\u0026#34; \u0026gt; git commit -m \u0026#34;Updating index.js\u0026#34; If you want to have an easy template for all ZUI commit messages, you can actually execute the following to the root of the repository:\n\u0026gt; git config --local commit.template \u0026#34;./.gitmessage\u0026#34; Now, when you try to make a commit, you\u0026rsquo;ll get a prompt to fill in the commit details with more information regarding your changes. This also works with git UI tools, like GitKraken.\n Conventional changelog Recommended links:\n Conventional changelog  Based off of your commit messages, lerna + conventional-changelog will do a diff between the last version of a given package and the currently releasing changes, and figure out the proper version.\nZUI 4.x is what we\u0026rsquo;re currently on, and we plan to keep it that way until something shinier comes along. So, ZUI uses a slight fork of conventional-changelog-angular which lets us pin down the major version, and sticks us in the minor and patch increments for all updates. You can see the source code for our version here: https://gitlab.zywave.com/zui/zui/tree/dev/scripts/packages/conventional-changelog-zui.\n How ZUI currently versions itself (in descending priority):  If the commit contains BREAKING CHANGE: \u0026lt;reason\u0026gt; in the body, we will bump the minor version (4.1.6 =\u0026gt; 4.2.0) You won\u0026rsquo;t be able to commit using git commit -m because this only accepts a subject line. Instead, use git commit, which will prompt your Git default text editor to open so you can include a body message.  If the commit subject starts with feat:, fix:, or perf:, we\u0026rsquo;ll do a patch (unless the body also includes BREAKING CHANGE: \u0026lt;reason\u0026gt;) If the commit subject starts with chore:, build:, docs:, refactor:, ci:, style:, or test: we\u0026rsquo;ll do nothing with the version (but include the notes in the CHANGELOG) If you don\u0026rsquo;t follow the rules, we won\u0026rsquo;t do anything. Hopefully you didn\u0026rsquo;t change anything meaningful.   How to commit a breaking change to ZUI If you are not using a GUI, follow the instructions below on how to commit a breaking change via command line.\n In command prompt, stage all your breaking changes first and then type git commit and press the \u0026lt;enter\u0026gt; key:  \u0026gt; git commit  Your default Git text editor will open and prompt you to provide a commit message. The first line will always be your subject and any lines following will be the body:  feat: removed app name slots from zui-shell BREAKING CHANGE: removed the slots \u0026#34;app\u0026#34; from zui-shell-topbar and zui-shell-nav in favor of the attribute app-name on zui-shell  After you have entered your message, all you need to do is save and close the file for Git to commit your changes.   Troubleshooting If you\u0026rsquo;re curious at any time what the next release of ZUI will look like, you can execute the following command against the dev (or master) branch:\ndev:\n\u0026gt; npx lerna version --conventional-prerelease=* master:\n\u0026gt; npx lerna version --conventional-graduate Don\u0026rsquo;t commit the changes generated as a result of this. You can reject the changes before the updates are saved to your repo.\nMerge requests ZUI offers several merge request templates to help explain the intent of the changes. When you go to log a merge request, near the \u0026ldquo;title\u0026rdquo; section, you can select a template and we\u0026rsquo;ll provide you some guidelines for how to better communicate the changes.\nSome quick best practices:\n Keep the merge request small; the monorepo structure might tempt you to make many changes all at once, but it\u0026rsquo;s harder to review, and harder to properly associate your changes with the right packages. For \u0026ldquo;code review\u0026rdquo; merge requests, you can always prepend WIP: to the title to prevent accidental merging. Delete the source branch once it has been merged into dev. If your changes are isolated to one package, feel free to check the Squash commits when merge request is accepted. box. Just be sure that the title of the merge request (or the resulting commit message) follows our rules above. If your changes span many packages, don\u0026rsquo;t squash the commits. Better to have targeted, explicit commits against the changed code than one blob commit that is hard for conventional-changelog to properly allocate to the right package(s).  "
},
{
	"uri": "http://zui.zywave.com/developers/developing-zui/",
	"title": "Developing ZUI",
	"tags": [],
	"description": "",
	"content": " Initialization  cd ${insert path to root of ZUI here} yarn install  This one takes awhile. Sorry.  yarn run bootstrap  Using a tool called lerna, we do some really cool stuff to get the monorepo to play nicely with ZUI-to-ZUI dependencies.  yarn run build  Runs through every package defined in the monorepo and executes their \u0026quot;build\u0026quot; script as defined in their respective package.json file.   Creating a component If you\u0026rsquo;re creating a new web component (e.g. \u0026lt;zui-my-element\u0026gt;), feel free to use the built-in ZUI component generator.\nNote: This assumes you have yeoman installed (npm i -g yo)\n\u0026gt; yarn run generate:wc This will give you:\n a new package defined under packages/components/\\${elementName} a src/ directory  includes a sample element to get the ball rolling a package.json to define the package a gulpfile to handle building, demoing, etc.  a lab  stored in the index.html file can be started up with npx gulp watch (requires the working directory to be inside your new component\u0026rsquo;s folder)   Common gotcha: If you\u0026rsquo;re adding more elements to the same package, be sure to add an import statement to the index.js file!\nAdd new component to zui-components-all: For your component to be recognized by zui-bundle please add to zui-components-all\u0026rsquo;s package.json by running the following command from the root of ZUI; update zui-new-component-name with your component\u0026rsquo;s name, i.e. zui-breadcrumbs\n\u0026gt; npx lerna add @zywave/zui-new-component-name --scope=@zywave/zui-components-all Also add new component to zui-bundle: Since zui-components-all is a dependency of zui-bundle, you simply need to manually add a line to import your new component package into /packages/misc/zui-bundle/src/zui-bundle.js. Also add your component\u0026rsquo;s FOUC styles into /packages/misc/zui-bundle/src/css/zui-bundle.fouc.scss too\n Creating an experimental component If the component you are creating has yet to be approved as a ZUI component, it is considered an experimental component. All experimental components must be added to the exp branch. Follow all instructions in the Creating a component section, but make sure you are branching off the exp branch instead of the dev branch.\n\u0026gt; git fetch origin \u0026gt; git checkout -t origin/exp \u0026gt; git checkout -b new-branch-name Creating a CSS package If you want to create a new CSS package, the provided template should help get the ball rolling.\nNote: This assumes you have yeoman installed (npm i -g yo)\n\u0026gt; yarn run generate:styles This will give you:\n a new package defined under packages/styles/\\${cssPackageName} a src/ directory  includes sample .scss files to get the ball rolling a package.json to define the package a gulpfile to handle building, demoing, etc.  a lab  stored in the index.html file can be started up with npx gulp watch (requires the working directory to be inside your new packages\u0026rsquo;s folder)   Be sure to follow the style guide!\nStyle guide JavaScript For the most part, we use prettier and eslint to help you out here. You shouldn\u0026rsquo;t have to worry about anything; we even have a precommit hook set up to auto format / validate your code.\nFor you vscode users, here are some recommendations to keep you in sync:\n prettier-vscode. set \u0026quot;editor.formatOnSave\u0026quot; to true in File \u0026gt; Preferences \u0026gt; Settings   Sass/CSS Coming soon!\n Web components Attributes HTML has some pretty wild variations when it comes to attribute names. You\u0026rsquo;re most likely to see hyphenated (e.g. data-prop) and all-lowercase, single word (e.g. tabindex). And with custom elements becoming mainstream, be ready to see other crazy attributes like snake_case and the all-too-familiar camelCase. Here at ZUI, we like to enforce some standards. So, please use hyphenated, all-lowercase attributes.\nExample:\nclass MyElement extends HTMLElement { static get observedAttributes() { return [\u0026#34;my-property\u0026#34;]; } get myProperty() { return this.getAttribute(\u0026#34;my-property\u0026#34;); } } \u0026lt;my-element my-property=\u0026#34;good!\u0026#34;\u0026gt;\u0026lt;/my-element\u0026gt; This requires some work on ZUI\u0026rsquo;s end. If extending PolymerElement, this behavior is baked in. However, if extending LitElement (or ZuiBaseElement), you\u0026rsquo;ll have to do something like the following:\nclass MyElement extends LitElement { @property({ attribute: \u0026#34;my-property\u0026#34;, type: String, reflect: true }) myProperty = undefined; /* more stuff here */ }  Public and private JavaScript is not the most obvious language when trying to do OOP. But, with ES6 classes, people have tried to get closer to actual OOP paradigms. One of the ways this is accomplished is by being explicit in your property and method declarations. You\u0026rsquo;ll see this principles in practice in our web component libraries of choice, lit-html/lit-element.\nPublic:\n methods: camelCase() properties: camelCase  Private:\n methods: _camelCase() properties: _camelCase  Custom CSS properties With ZUI, one of the main ways for a consumer to manipulate a component is via CSS Custom Properties. If you are unsure what we mean by that, checkout our documentation. All of our custom CSS properties should look like the following:\n:host { --zui-my-element-color: hotpink; }  We namespace the property to ZUI (don\u0026rsquo;t want to clash with others) We then scope it to the proper custom element And finally we indicate what the intent of the property is  So, this variable specifies a color for \u0026lt;zui-my-element\u0026gt; to be used in its CSS.\nWhat the FOUC? One caveat to custom elements is the way in which the browser will render them. Let\u0026rsquo;s give a really basic (contrived) example:\n User navigates to https://www.example.com/ Browser loads HTML on this page, stopping to load stylesheets, scripts, etc. Browser renders what it can Browser begins to compile and execute JavaScript Application is fully loaded  Custom elements require JavaScript to be processed in order for the HTML elements to be rendered properly. Browsers have opted to \u0026ldquo;defer\u0026rdquo; custom element rendering until step 4 (not with step 3). This is great for SEO as the first contentful paint can happen sooner; this is unfortunate for custom elements as it means that \u0026lt;my-element\u0026gt;\u0026lt;/my-element\u0026gt; will get rendered based off of some very old HTML rendering rules around unknown or invalid HTML. Then, the next couple of frames will start to upgrade the custom elements and saturate the content. It\u0026rsquo;s worth stressing that this is still very fast; and for you SPA folks out there, this will definitely not be noticeable prior to your app fully loading (you have a lot more JavaScript to process and execute, believe us). But for you server-side-rendering folks, this WILL be noticeable.\nWhat we\u0026rsquo;ve just described is known as FOUC: Flash Of Unstyled Content.\nWe here at ZUI want to help you, no matter what way you deliver HTML content to our users. So, as part of our process of maintaining ZUI, we\u0026rsquo;ve come up with a solution. In all of our components, there will be an extra bit of CSS you can choose to load: dist/css/zui-*.fouc.css. This CSS package will define some styles that, when loaded, will help the browser style your undefined elements until they are saturated and upgraded. There is one caveat to this, and it\u0026rsquo;s in the form of Internet Explorer (yay!). If you care about your elements at load time to not encounter this flash, you will need to sprinkle unresolved attributes on your ZUI components. This attribute will help to mimic what vanilla custom elements have provided us, the :defined pseudoselector. We use this (via :not(:defined)) to out of the box handle displaying a button that looks like, well, a button, even if it hasn\u0026rsquo;t been upgraded yet. The unresolved attribute is technically slower than what the browser can provide, but probably barely noticeable to the naked eye.\nSo, if you decide to contribute to ZUI in the way of custom elements, please be sure to provide some FOUC styles if relevant. You can even use our handy dandy SASS mixin found in zui-sass-scripts:\nmy-element { @includeundefined-element { display: none; // no my-element for you! } } Pro tip #1: Need to test your FOUC styles? Before your components get loaded in \u0026lt;script\u0026gt; tags, just add the following:\n\u0026lt;script\u0026gt; window.customElements.define = function() { /* lel we hijacked custom element registration */ }; \u0026lt;/script\u0026gt; Pro tip #2: Have multiple FOUC stylesheets you\u0026rsquo;re loading? Combine them into one with the power of SASS!\n// fouc.scss @import \u0026#34;node_modules/@zywave/zui-button/dist/css/zui-button.fouc.css\u0026#34;; @import \u0026#34;node_modules/@zywave/zui-dialog/dist/css/zui-dialog.fouc.css\u0026#34;; @import \u0026#34;node_modules/@zywave/zui-icons/dist/css/zui-icons.fouc.css\u0026#34;; @import \u0026#34;node_modules/@zywave/zui-shell/dist/css/zui-shell.fouc.css\u0026#34;; // output as single CSS file\u0026lt;!-- link in head of your HTML document --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; src=\u0026#34;fouc.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; ... \u0026lt;/html\u0026gt; Troubleshooting This monorepo can be quite a beast to work in. If you find yourself in some weird scenarios, here\u0026rsquo;s some possible steps that might help.\nMerge conflicts and yarn: Just don\u0026rsquo;t worry about merge conflicts in the yarn.lock file. It\u0026rsquo;s not worth it.\n Mark as resolved Delete it yarn install to recreate it Add the new yarn.lock file to your commit and carry on   The \u0026ldquo;Burn it with fire\u0026rdquo; approach:  Delete yarn.lock Delete node_modules/  This one takes awhile, I\u0026rsquo;m sorry Shift + Delete on the folder in File Explorer to skip the recycle bin  yarn install yarn run bootstrap yarn run build  If you\u0026rsquo;d rather not have to type this out explicitly, you can run the following:\nWindows:\n\u0026gt; yarn run nuke:windows Linux:\n\u0026gt; yarn run nuke:nix Note: This still will take a while.\n"
},
{
	"uri": "http://zui.zywave.com/components/dialogs/",
	"title": "Dialogs",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rIntroduction Dialogs are used to display a message or content on a layer above the current page. Content inside a dialog can vary greatly. Usually, a dialog is centered around a specific action that a user must take. Saving a setting or a permanent delete are examples of when dialogs are useful.\nBest practice is to avoid including forms within a dialog.\nAnatomy \nTitle H1 title should not span more than 1 line.\n\nConent area Content area should be a minimum of 120px tall.\nContent area width of 415 on SMALL dialogs, 615 on STANDARD dialogs, and 815 on LARGE dialogs.\n\nClose X The close X icon button is located in the upper-right corner outside the dialog box.\n\nActions area  Primary action\nPrimary actions are right aligned at the bottom of the dialog 30px below the content area.\nThe primary action should always appear on the far right.\n Secondary actions\nSecondary actions appear to the left of the primary action, 30px below the content area\n Tertiary action\nTertiary actions or help text appear left aligned 30px below the content\n  Sizing and Spacing \nTypographic heirarchy\nTitle should be H1.\nContents should follow body copy guidelines. Padding  36px padding around entire perimeter. 15px padding between Title and main content area. 30px padding between main content area and actions area.  If the dialog is taller than the viewport, 36px padding will be applied between the dialog and the viewport. If the dialog is shorter than the viewport, then it will be centered vertically.\nDialogs will always be centered horizontally within the viewport.\nVariations Small Commonly used to interrupt the user with messaging you need them to confirm, such as delete and loss of data if navigating to a different page.\nStandard Standard dialogs should be used for messages that are longer in length, such as legal jargon.\nLarge Use a large dialog when there is a more functionality, like a table.\nInteraction Closing a dialog There are several ways that a dialog can be closed and the one that you choose depends on the type of content that it contains. Most dialogs will have more than one way to close them.\n Clicking into the darkness - Standard functionality for closing a dialog; this is best used when the user isn\u0026rsquo;t filling out any data within the dialog. Since we prefer to avoid including forms within a dialog, this functionality will be very common and will be enabled automatically when using ZUI dialog. If your dialog includes data entry please make sure you disable this functionality.\n Clicking the X - This can be used on every dialog to close the message.\n Clicking a close button - Close buttons will only be included if there is no action within the dialog that we want the user to take. One example of this is a dialog that only contains legal information that the user can read, but doesn\u0026rsquo;t need to act upon.\n  Scrolling Best practice is to avoid the need for a dialog to scroll. When scrolling is required, the entire dialog screen will scroll. Remember the to keep 36px padding between the viewport and the dialog when it first appears to the user.\nBackground contents that are underneath the dark overlay will remain static while the dialog scrolls.\n\r\rTable of Contents  show  Parameters   show Shows the dialog using specified parameters\nParameters  header string This is the header slot (optional, default '\u0026lt;h1\u0026gt;Header goes here\u0026lt;/h1\u0026gt;') content string This is the content slot (optional, default '\u0026lt;p\u0026gt;Content goes here\u0026lt;/p\u0026gt;') footer string This is the footer slot (optional, default '\u0026lt;zui-button class=\u0026quot;secondary\u0026quot; dialog-close\u0026gt;Close\u0026lt;/zui-button\u0026gt;\u0026lt;zui-button dialog-confirm\u0026gt;Submit\u0026lt;/zui-button\u0026gt;') size string Sets the className for the dialog (optional, default 'medium') noCancelOutsideDialog Boolean Sets the noCancelOutsideDialog attribute on the dialog (optional, default false)  \r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/components/dropdown-multi-select/",
	"title": "Dropdown multi-select",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat is a dropdown multi-select? A dropdown multi-select is a type of input field in which a user fills an input box with one or many items from a list of acceptable inputs.\nWhen to use Appropriate for lists larger than 2 options that may require a user to select more than 1 option.\nAlternate considerations  Use checkboxes for lists smaller than 3 items. Use a dropdown select if users can only select 1 option. Use a multi-picker when the user needs to search for specific items and select them from a list with more than 7 – 10 items.  Anatomy Label Text that defines what type of options are in the list.\nSee labeling best practices\nInput The field designated for selecting an individual option from a grouping of related options.\nSelection Once an option is chosen, it becomes a selection. Selections are visually defined by the encapsulation of the text in a gray rectangle.\nDropdown chevron The chevron arrow, within the input suggesting that there are items to select within a dropdown.\nSelected option An option that is visibly selected.\nOptions list The grouping of related input options.\nOption A unique input option.\nOption checkbox A selectable checkbox beside an option.\nSee base design specs\n The anatomy of a dropdown select.\n \nSizing and Spacing Use the following links to find exact pixel specs for dropdowns multi-select.\nDesign specs\nOrganizing the list Sort the list in a logical order. For instance, put the most selected option(s) at the top. In many cases we recommend alphabetical order.\nGrouping  Sometimes you\u0026rsquo;ll need to add grouping to a long list of options. Titles can break up options into groups to help users more easily locate them.  See grouping design specs\n Icons  Use icons to distinguish between options. Often icons are used when you have two different types of options in a list.  See icon design specs\n \nBehavior Open / close  Normal behavior is to reveal the list down when placement of the select input is high enough within the viewport. When select input is lower on the screen the list will reveal up. Dropdrown chevron icon: rotates 180 degrees clockwise when opened, when closed spins back 180 degrees counter clockwise, returning to the original position.    Scrolling\n If the options can be displayed within the viewport it is ideal to not have a scroll bar. Scroll bars should appear when an options list exceeds the height of the screen but should not be taller than 300px. Note options lists will appear below or above select inputs depending on where they sit within the viewport (see Open / close).   \nTypeahead\n Present in all dropdown selects, streamlines experience for users. Typeahead is relevant only to options in the list, it will not return group names. Grouping headers are not seen when using typeahead.  See typeahead\n\nDefaulting a selection  A dropdown select shouldn\u0026rsquo;t default a selected option. If you\u0026rsquo;re confident users will likely choose an option you may consider defaulting to a selection. Sometimes choosing \u0026lsquo;none\u0026rsquo; as an option is necessary, if none of the options are applicable to the user. None should appear at the top of the list.    Input states\nSee input states design specs\n\nOption list states See option list states design specs\n Selection wrapping  When multiple options are selected in a multi-select list, selections will populate the input and eventually will have to wrap, in order to fit.  See selection wrapping design specs\n  \nRemoving the selection  After a user has chosen an option it turns into a selection within the input. Users can remove a selection by using one of three methods. Selections can be removed by clicking on the X icon within the selection. Backspacing over a selection in the input removes it. By deselecting the checkbox within an option list will also remove the selection.  Responsiveness Mobile Users on mobile and touch devices should not see our styling; instead the default styles native to the device should override ours, as these typically provide a better UX as they\u0026rsquo;re designed for use on that particular device.\n\r\rNeeds to be implemented \n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/components/dropdown-select/",
	"title": "Dropdown select",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat is a dropdown select? A dropdown select is a type of input field in which a user fills an input box with an item from a list of acceptable items. Dropdown selects allow only one option to be chosen.\nWhen to use Use a dropdown select to organize a list of options a user can select from.\nAlternate considerations  Use a dropdown multi-select if two or more options can be selected - not necessarily required. Use radio buttons when there\u0026rsquo;s fewer than 3 options. Use a toggle if the options are a yes or no. Use a picker when the user needs to search for a specific item and select it from a list that is pageable.  Anatomy Label Text that defines what type of options are in the list.\nSee labeling best practices\nInput The field designated for selecting an individual option from a grouping of related options.\nSelection Chosen option from the options list.\nRemove selection An X icon appears when a selection is made as a method to delete the chosen selection, clearing the input.\nDropdown chevron The chevron arrow, within the input suggesting that there are items to select within a dropdown.\nSelected option An option that is visibly selected.\nOptions list The grouping of related input options.\nOption A unique input option.\nSee base design specs\n The anatomy of a dropdown select.\n \nSizing and Spacing Use the following links to find exact pixel specs for dropdowns select.\nDesign specs\nOrganizing the list Sort the list in a logical order. For instance, put the most selected option(s) at the top. In many cases we recommend alphabetical order.\nGrouping  Sometimes you\u0026rsquo;ll need to add grouping to a long list of options. Titles can break up options into groups to help users more easily locate them.  See grouping design specs\n Icons  Icons may be used beside select options; they should assist by making selection easier for users. Use icons to distinguish between options. Often icons are used when you have two different types of options in a list.  See icon design specs\n \nBehavior Open / close  Normal behavior is to reveal the list down when placement of the select input is high enough within the viewport. When select input is lower on the screen the list will reveal up. Dropdown chevron icon: Rotates 180 degrees clockwise when opened, when closed spins back 180 degrees counter clockwise, returning to the original position.    Scrolling\n If the options can be displayed within the viewport it is ideal to not have a scroll bar. Scroll bars should appear when options lists exceed the height of the screen but should not be taller than 300px. Note options lists will appear below or above select inputs depending on where they sit within the viewport (see Open / close).   \nTypeahead\n Present in all dropdown selects, streamlines experience for users. Typeahead is relevant only to options in the list, it will not return group names. Grouping headers are not seen when using typeahead.  See typeahead\n\nDefaulting a selection  A dropdown select shouldn\u0026rsquo;t default a selected option. If you\u0026rsquo;re confident users will likely choose an option you may consider defaulting to a selection.    Removing the selection\n Once a selection is chosen from the options list, an X icon will appear in the input. Clicking the X icon will remove the selected choice. Users can also click into the input and remove the selection by backspacing.  See removing selection design specs\n\n Input states See input states design specs\n Option list states See option list states design specs\n \nBack to top -- Responsiveness Mobile Users on mobile and touch devices should not see our styling; instead the default styles native to the device should override ours, as these typically provide a better UX as they\u0026rsquo;re designed for use on that particular device.\n \r\rNeeds to be implemented \n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/components/expanders/",
	"title": "Expanders",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat are expanders? An expander is an expandable UI component that reveals and hides the content contained within as the result of a click action.\nExpanders give the user a sense of what content they contain without necessarily forcing the user to actually view all of the expander\u0026rsquo;s content. Because they conserve vertical space, expanders can be especially good for mobile.\nExpanders generally work best when they ask the user to focus on a single task or a very small number of closely related tasks. That\u0026rsquo;s why it\u0026rsquo;s not a good practice to nest a table, tabs, or another expander inside of an expander.\n Terminology We define four types of expanders\u0026mdash;standard, lightweight, pop-out, and peek-a-boo\u0026mdash;which we define in more detail below. In order to better understand their similarities and differences, we use the following terminology to refer to the parts of an expander:\nExpander: an expandable UI element composed of multiple sections.\nSection: an element, consisting of a header and a content area, that makes up an expander. All expanders (except for peek-a-boos) consist of at least two sections.\nHeader: the element that contains a label and additional elements\u0026mdash;an icon, an action, and/or content details\u0026mdash;that give the user the information they need to determine how and whether to expand a section.\nAction icon: an icon appearing in the header that indicates the section can be expanded and collapsed.\n Content details: Read-only information visible in the header even when the section is collapsed.\nContent area: the area that appears when a header is expanded.\nLabel: the name of an expander section.\nContent: information inside of the content area.\n \n Types of expanders Each of the four types of expanders has some distinct features, which means that some expanders are a better fit for some situations than others.\nStandard expander The most common expander.\nMore details\n Pop-out expander Focuses the user\u0026rsquo;s attention on one section at a time.\nMore details\n Lightweight expander Draws less attention to itself, often used for filters.\nMore details\n Peek-a-boo expander A single-section expander that hides some of its content.\nMore details\n \n Standard expander Overview  Has a container Opens/closes by clicking anywhere in the header Can be one of multiple sections open at a time The most widely applicable expander type  All values are in pixels. X represents the height of the content area, which will vary based upon the height of the content inside of the section.\nStates Standard expanders on a gray background\nCollapsed:  Header background: #FFFFFF Header label: #7A7A7A  Hover:  Header background: #FAFAFA Header label: #3D3D3D  Expanded:  Header background: #FFFFFF Content area background: #FFFFFF Header label: #3D3D3D Action icon: Rotated 180 degrees    Standard expanders on a white background\nCollapsed:  Header background: #FAFAFA Header label: #7A7A7A  Hover:  Header background: #F4F4F4 Header label: #3D3D3D  Expanded:  Header background: #FFFFFF Content area background: #FFFFFF Header label: #3D3D3D Action icon: Rotated 180 degrees   \n\nVariations  By default all sections are closed, but you can customize to defaulting a section open. Defaults to one section to open at a time, but can customize to have multiple open at a time.   Pop-out expander Overview  Has a container Only one section can be opened at a time Opens/closes when clicking the the action only Often contains read-only details in the header Forces the user to focus on one section at a time  Sizing and spacing All values are in pixels. X represents the height of the content area, which will vary based upon the height of the content inside of the section.\nMobile Because of limited space, the mobile pop-out expander doesn\u0026rsquo;t get any wider when expanded.\n  \nStates Popout expanders on a gray background\nCollapsed:  Header background: #FFFFFF Header label: #7A7A7A  Hover:  Header background: no change Header label: no change Header action: uses button hover  Expanded:  Header background: #FFFFFF Content area background: #FFFFFF Header label: #3D3D3D    Popout expanders on a white background\nCollapsed:  Header background: #FAFAFA Header label: #7A7A7A  Hover:  Header background: no change Header label: no change Header action: uses button hover  Expanded:  Header background: #FFFFFF Content area background: #FFFFFF Header label: #3D3D3D   \n\n Lightweight expander Overview  No container Can be one or multiple sections open at a time Opens/closes by clicking the label or action Doesn\u0026rsquo;t draw attention to itself  Sizing and spacing All values are in pixels. X represents the height of the content area, which will vary based upon the height of the content inside of the section.\nStates Lightweight expanders on a white background\nCollapsed:  Header label: #7A7A7A  Hover:  Header label: #3D3D3D  Expanded:  Header label: #3D3D3D Action icon: Rotated 90 degrees    \n Peek-a-boo expander Overview  Only one section Appears in the middle of content; only hides some Opens/closes by clicking the header or action Header slides below to reveal content Doesn\u0026rsquo;t draw attention to itself  Sizing and spacing All values are in pixels. X represents the height of the content area, which will vary based upon the height of the content inside of the section.\nStates Peek-a-boo: collapsed state\n Peek-a-boo: expanded state\n \n Rare situations Icon placement The best practices for icon placement for each type of expander are outlined above. Sometimes, though, other design considerations (e.g., content details in a standard expander) might justify placing the icon elsewhere, if the designer believes doing so will make things clearer for the user.\nContent details Usually, content details will appear in a pop-out expander. However, they may also be used in a standard expander.\n\r\rTable of Contents \r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/components/file-selector/",
	"title": "File Selector",
	"tags": [],
	"description": "",
	"content": "The File Selector component allows the user to select one or many f from a user’s file system. Either natively using an file input or drag and drop.\n"
},
{
	"uri": "http://zui.zywave.com/foundations/fonts-typography/",
	"title": "Fonts &amp; typography",
	"tags": [],
	"description": "",
	"content": " Base font Zywave uses system fonts for all text within our applications, including headlines, introductory text, body text and any components that contain text.\nWith system fonts, page content can feel more like it belongs on your particular computer or device.\nMore information on system fonts\n    Font Size(px) Weight Color     System fontsSegoe UI-apple-systemBlinkMacSystemFont 14px 400 ZUI Gray 800      Headlines We have 6 headline styles used throughout our applications. Though there isn’t a strict standard on appropriate headline usage, it’s essential to keep in mind that font weight and size are used to convey importance and bring hierarchy to a page.\nNote: Our standard set of headline styles–featured in the supporting image\u0026ndash;are paired with our default body copy. However, in certain circumstances, an application may use small or x-small body copy, in which case standard headline sizes are modified to better fit the smaller body text and help maintain a balanced hierarchy (Hero: 36px, H1: 27.8px, H2: 22.32px, H3: 17.16px, H4: 13.92px, H5: 12px, H6: 10.2px).\nFor more information, see body copy.\n   \n   Name Size(px) Weight Color Usage guidelines     Hero 32 300 ZUI Gray 800 Used sparingly, typically for welcoming the user to a new experience. ie. in step flows   H1 - First header 26 600 ZUI Gray 800 Used as the page title and modal title   H2 - Second header 20 600 ZUI Gray 800 -   H3 - Third header 16 600 ZUI Gray 800 -   H4 - Fourth header 14 700 ZUI Gray 800 -   H5 - Fifth header 12 700 ZUI GRAY 800 ALL CAPS    Body copy We have 3 defined body copy sizes used throughout our applications. Typically, default body copy is appropriate on screen; however, you may wish to use small or x-small for special cases.\n   \n   Name Size(px) Weight Color Usage guidelines     Default 14 400 ZUI Gray 800 Base font   Small 12 400 ZUI Gray 800 -   X-small 11 400 ZUI Gray 800 -    Font weight We have 4 font weights used throughout our applications. Though there isn’t a strict standard on appropriate font weight usage, it’s essential to keep in mind that font weight and size are used to convey importance and bring hierarchy to a page.\n   Line height We use a standard 1.6 line height. We recommend using unit-less line heights because child elements will inherit the raw number value, rather than the computed value. With this, child elements can compute their line heights based on their computed font size, rather than inheriting an arbitrary value from a parent that is more likely to need overriding.\nFont size is measured from the top of a capital letter (O) to the bottom of descending characters (p). Half the line height extends both up and down from the centerline of the text.\n   Line length To optimize text readability, we recommend line lengths of at least 45 characters and no more than 75 characters.\n"
},
{
	"uri": "http://zui.zywave.com/foundations/footer/",
	"title": "Footer",
	"tags": [],
	"description": "",
	"content": " What is Footer The footer is the small section at the bottom of each page that contains things like the privacy and cookie policies, and other legal and trademark information. It is easy to find the information you are looking for, should you need it, and does not interfere with using the app.\nWhen to use The footer is a core feature of shell and should be used in every application.\nAnatomy The core features of the footer include:\n Zywave copyright Terms and Conditions link Privacy Statement link DMCA link Cookie Usage link Contact link  Behavior The footer stays at the bottom of the content window. There are no special behaviors, other than responsive design changes listed below.\nThe links in the footer go to the following:\n Terms and Conditions link - https://www.zywave.com/terms-conditions/ Privacy Statement link - https://www.zywave.com/privacy-statement/ DMCA link - https://www.zywave.com/dmca-notice/ Cookie Usage link - https://www.zywave.com/cookie-usage/ Contact link - mailto:support@zywave.com  Responsive Design As the viewport grows the footer moves from three lines stacked on top of each other to a single line.\nBreakpoint - ≥480 Breakpoint - ≥720 Breakpoint - ≥1024  "
},
{
	"uri": "http://zui.zywave.com/patterns/forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": " Forms allow users to enter data that is used by the application. The point of all forms is to collect error-free data while placing as little burden on users as possible. Well-designed forms make entering this data straight forward and easy.\n Table of contents  Form elements Form layout and structure Form actions Indicators and contextual help Validation Keyboard accessibility   Form elements  The following are the basic building blocks for creating forms. These elements allow users to provide data for your form. Text input A single-line box that the user can enter text into. They automatically move with their content to the left as the text input cursor reaches the right edge of the input field. See below for more detailed documentation on field sizes and statuses. For more information see text-input documentation.\n Drop-down select Use this control when you need to pick just one item from a list. For more information see dropdown-select documentation.\n Radio button A one at a time selection. Only one button can be selected from a group. If you select another, the previously selected input is deselected. For more information see radio-button documentation.\n Checkbox This type of input is used when you need users to answer a question with a yes or no response. More than one can be selected. For more information see checkboxes documentation.\n Toggle Cross between a button and checkbox. An on/off or true/false data input, used for a binary flip. For more information see toggles documentation.\n Datepicker Appears as a standard text input but with calendar icon and date format as ghost text. You can type the date in the input field or click in the input field to get a calendar to appear to select a date from.  File selector The File selector component allows the user to select one or many files from a user’s file system, either natively using a file input or drag and drop. For more information see File selctor documentation.\n Form layout \u0026amp; structure  Putting all the pieces together in the right order and layout is essential for a user to add information quickly and easily. The user must understand exactly what is needed of them and why. If they run into issues, help must be obvious. This includes:\n Form Layout Titling the Form Labeling Elements Margins \u0026amp; Gutters Contextual Help Form Actions Required Field Indication Validation  General rules  All forms need a title, form elements and actions. Form elements need labels so the user knows what type of data to add. Whenever possible keep your form elements to one column. Communicate what you want through size, make each element the size of what data you are collecting.  Multi-step A multi-step form is a long form that is broken into multiple pieces. They’re used to make long forms less intimidating. By allowing users to complete their information in smaller chunks, you create a positive user experience and increase the chance of form completion. Consider using a step flow for multi-step forms.\n Titling the form In most cases you\u0026rsquo;ll want to give your form a clear title that helps users understand exactly what they should expect by filling out the form. \u0026lsquo;Add an account\u0026rsquo; for example.\n Labeling elements The label helps bring proper context to your inputs to let the user know what data to enter. Labels should be semi-bold and the same color as our default text (gray 600). Generally a single label element should be present for a single control.\n Label alignment Top aligned labels are prefered for shorter forms. They are easier to read, requiring less eye movement and making it easier to read the label and see its corresponding field. Consider available space and number of fields when determining which label alignment to use.\n\nLeft aligned labels are preffered for long forms with many inputs. Right justifying the label text helps with its relationship to the input field and readability. Consider available space and number of fields when determining which label alignment to use.\n\nLeft aligned labels should line up with the text of the element.\n Margins \u0026amp; gutters Always keep consistent margins between form labels, inputs, and actions.\n 30px margin between title and elements 10px margin between labels and elements 20px margin between elements 30px margin between elements and actions  \nWhen errors happen the form needs to make space for the proper validation indicators and notifications.\n 20px margin between elements 30px margin between elements and notifications 30px margin between notifications and actions   For left aligned labels, keep a consistent gutter between the label and the element. Shorter gutter distances make it easier for the user to use the form. Long labels that need to wrap should keep the defined form margin or gutter. We recommend 40px.\n Grouping elements with cards In many cases it is reccomended to group related fields together using a card as their container. This helps the user understand the relationship between elements by forming a visual relationship. To help emphasise the relationship it\u0026rsquo;s recommended to add group titles and instrutions..\n Form actions  Action hierarchy Forms typically have Primary and Cancel actions, but they could also have a secondary save action. Primary actions are buttons in a form that perform essential \u0026lsquo;final\u0026rsquo; functionality, such as \u0026lsquo;Save\u0026rsquo; or \u0026lsquo;Submit\u0026rsquo;. For more information see button documentation.\n\nSometimes having multiple buttons are necessary. A form may need Primary, Secondary and Cancel actions. In those cases line up the buttons based on their importance. Secondary actions, such as \u0026lsquo;Save\u0026rsquo; are directly related to the form but should be treated as less important. \u0026lsquo;Cancel\u0026rsquo; buttons should be treated as link buttons.  \nAction positioning Place actions inline with form fields Form actions should appear where the user is likely to look first after completing a form. This is typically directly below the form itself in line with the inputs.\nPlace back buttons at the top In Multi-step forms some people want to go back to check or change their answers. In these cases use a back button at the top of the form. Breadcrumbs work very well in these cases.\nPlace actions in a modal dialog footer To comply with modal standards the form actions should be placed in the footer of the modal.\nActions on the right side of a page When the action will take you to another page align the action to the bottom right of the page. Usually this is used in a multi-step process. See Step Flow documentation.\n Indicators and contextual help  Required field indication Field indicators help the user understand what is necessary for them to complete the form, setting expectations and enabling them to fill out the form more quickly and accurately.\nForm instructions Every form should include a note at the start of the form that explains what fields are required in the form. This helps prevent errors and minimizes workload. How you communicate this depends on the specific mix of field types your form has. If all fields are required, you don\u0026rsquo;t need indicators on every field, but in the notes let the user know that all questions must be answered.\nRequired indicators They should be used whenever a field is required. Use a red asterisk next to the label.\nOptional indicators Occasionally, all of the fields are required except one or two. In these times it\u0026rsquo;s ok to use an optional indicator. For this use light gray text that says (optional). This can be under the label, to the right of it, or potentially in the ghost text, depending on available space.\n In some cases a label isn\u0026rsquo;t enough and we need provide additional help. Contextual help should appear directly on a form page so that users can easily find help when they look for it. This can take many appearances, such as constantly visible helper text below or to the right of the field, or a tooltip or popover icon. All of these are suitable options and will depend on structure and complexity of the form.\n Validation  Users dislike when they go through the entire process of filling up the forms and have to wait for clicking the submit button to understand what went wrong. If possible, validation should be inline: meaning, as soon as the user has finished filling in the element, an indication should appear if the field contains an error, or is valid, if validation is necessary. If an element is in an error state, when the user meets the requirements of the input it should revalidate, removing the error.\nIn many cases inline validation isn\u0026rsquo;t possible. When those situations arise, consider a combination of element validation and helpful messaging. This can be helpful to make sure the error is seen and easily corrected by the user.\n\nElement validation When something goes wrong, it\u0026rsquo;s important to highlight each element that has an error and add a clear message of what needs to be done to pass validation, this way a user can easily find what they need to fix. Input elements, like text inputs, dropdown selects and date pickers show validation by changing to their error state and showing the validation message below. Elements that don\u0026rsquo;t have error states, like checkboxes, radio buttons and toggles only show the validation message below the element.\nIn some cases it is appropriate to give the user a success validation message to increase their confidence in moving forward.\nValidation notification When the form action button is pressed, if there are errors an error notification should show letting the user know something needs to be done before completion. Proper messaging is important for the user to know how to move forward quickly. Be direct on what to fix and use plain and simple language.\nNotification placement  If there wasn’t a reload of the page – show the message directly above the submit/save button. If there was a reload of the page – show the message at the top of the page, usually under the form title so the user doesn\u0026rsquo;t need to scroll to see it.   Keyboard accessibility  To ensure our forms are usable for everyone it\u0026rsquo;s important to build forms that are accessible. To that point, consider the following keyboard interactions.\nCommon keystrokes  Arrows - Navigates the user to the next element and focuses that element. Tab - Navigates the user to the next element and focuses that element. Shift+Tab - Navigates backwards to the previous element and focuses that element. Spacebar - Selects an element. Enter - When focused enter will perform the action of the element.\n  Navigation order As a keyboard user navigates through the page, the order in which interactive items receive keyboard focus is important. The default keyboard navigation order must be logical and intuitive.\nInteracting with elements  Text input - When focused add text using the keyboard, then tab or use arrows to move between elements. Checkbox - When focused use the \u0026lsquo;spacebar\u0026rsquo; to toggle on or off, then tabbing or arrows to move between elements. For a list of checkboxes, use the spacebar to select the items you want and arrows to move to the next item. In this case all or none of the elements can be selected at once. Radio button - When focused use the \u0026lsquo;spacebar\u0026rsquo; to toggle on or off, then tabbing or arrows to move between elements. For a list of radio, use the spacebar to select the items you want and arrows to move to the next item. In this case only one of the elements can be selected at once. Dropdown select - When focused use \u0026lsquo;spacebar\u0026rsquo; or enter to open the dropdown, then arrows to cycle through options, then tab or enter to select and move to the next element. Toggle - When focused use the \u0026lsquo;spacebar\u0026rsquo; to toggle on or off, then tabbing or arrows to move between elements. Datepicker - When focused use \u0026lsquo;spacebar\u0026rsquo; or \u0026lsquo;enter\u0026rsquo; to open the dropdown, then arrows to cycle through options, then tab to select and move to the next element. Button - When focused hitting \u0026lsquo;enter\u0026rsquo; will perform the action of the link. Links - When focused hitting \u0026lsquo;enter\u0026rsquo; will perform the action of the link. Dialog - When open hitting \u0026lsquo;esc\u0026rsquo; will close the dialog.  Special interactions  Submitting a form - When there are two or fewer elements, hitting \u0026lsquo;enter\u0026rsquo; will perform the primary action of the form. (i.e. a login screen) When the form has more than two elements, enter will do nothing until they have focus on the form actions.\n   "
},
{
	"uri": "http://zui.zywave.com/foundations/icons/",
	"title": "Icons",
	"tags": [],
	"description": "",
	"content": " Icon Overview Icons are one half of our visual library within ZUI. Icons can be broken up into two main categories: Navigation and System.\n Navigation Icons Our navigation icons add a visual component to the links within our side nav. Combined with their text labels they will speed up recognition and processing of the link text. They become especially important when the user has collapsed the sidenav. They should be easily recognizable images that will allow the user to naivigate throughout the site without needing to expand the navigation.  \nNavigation Icon Style Our navigation icons are solid/filled to add more weight to the sidenav. For more information on how to create navigation icons view our process documentation  \nCurrent icons Below is a list of our current navigation icons. If you can\u0026rsquo;t find the icon you are looking for, be sure to check out navigation icon backlog and ask a designer to complete a design for you.      Accounts \n     Activities \n    Admin \n    Administrators \n    Book \n    Carriers \n    Client Portal \n    Color Themes \n    Content \n    Communications \n     Community \n    Components \n    Course Catalog \n    Course Packages \n    Credentials \n    Disease Profiles \n    Developers \n     Domains \n    Files \n    Foundations \n    Get Started \n    Group Management \n    Help \n    Home \n    HR Hotline \n    Lists \n    Manage Users \n    Menu \n    Mods \n    Notifications \n    Organization \n    Organization Overview \n    Patterns \n    Portal Admin \n    Presentations \n    Proposal \n    Prospecting \n    Registered Apps \n    Reporting \n    Resources \n    RFPs \n    Settings \n    Setup \n    Single Sign-on \n    Solutions \n    Toolbox \n    Users \n    Zywave Sidebar \n    Zywave University \n  \n System Icons Our system icons are used throughout the UI to draw more attention to a specific element or action. Typically our system icons are used within buttons to the left of text labels to draw more attention to them. Or, if the icon is easily identifiable, the icon can be used alone within a button in order to save space.  \nSystem Icon Style Our system icons are outlined/stroked and take on the color of the element they are supporting. For more information on how to create navigation icons view our process documentation  \nCurrent icons Below is a list of our current system icons. If you can\u0026rsquo;t find the icon you are looking for, be sure to check out system icon backlog and ask a designer to complete a design for you.      Check \n    Remove \n    Close \n    Add \n    Edit \n    Search \n    Download \n    Upload \n    External \n    Link \n    Share \n     delete \n    Apps \n    Refresh \n    Help \n     Warning \n    Info Circle \n     Error \n     Grips \n    More \n    Sort \n    Document \n    PowerPoint \n    Word Document \n    Excel File \n    PDF \n    Print \n    Folder \n    Left \n    Up \n    Down \n    Right \n    Chevron Left \n    Chevron Up \n    Chevron Down \n    Chevron Right \n    Double Chevron Left \n    Double Chevron Right \n    Caret Left \n    Caret Up \n    Caret Down \n    Caret Right \n    Building \n    Dynamic List \n    List \n    Locked \n    Unlocked \n    Mail \n    Switch Profile \n    Rocket \n    User \n    Filter \n    Add Circle \n    Remove Cirlce \n    Check Circle \n    Calendar \n    Wrench \n  \n"
},
{
	"uri": "http://zui.zywave.com/foundations/illustrations/",
	"title": "Illustrations",
	"tags": [],
	"description": "",
	"content": " \nOur illustrations are broken into two main categories, hero illustrations and spot illustrations. Regardless of the type, the answer to these 3 questions should always be yes.\n Is it thoughtful?\nThe purpose of our illustrations is to draw attention to a specific portion of the UI. They should be informative and add clarity to the content they were designed for.\n Is it focused?\nOur illustrations contain a single subject. Each design should have one focal point and have a clear visual hierarchy of supporting elements that support one main topic.\n Is it professional and fun?\nOur illustrations are relatable and add a human element to our otherwise very clean and professional UI. Characters in our illustrations add an element of fun and convey emotion.\n \r\rHero illustrations\rSpot illustrations\r\r\rHero illustrations Hero illustrations are our most complex visual. The main purpose of these illustrations is to add weight to an element on the page and support the content they are related to. These large-scale images should be reserved for when you need to guide a user through a UI, prevent frustration, complete an experience, or reward/delight a user. They are not only larger than our spot illustrations, but also more saturated with color.\nMore details about hero illustrations and instructions on how to make them can be found on our hero illustration confluence page.  \nHero illustration anatomy  Organic gray background shape Must contain the following: Human illustration and some sort of accompanying background element: ie. a computer or bookshelf May contain the following: animals, decorative flair, stylized imagery  These illustrations can vary in size depending on the location they are designed for, but a good rule of thumb is to never make them smaller than 200x200px and generally no larger than 600x400px for full page landscape illustrations.\nWe are continually building a library of pieces that can be combined to create hero illustrations. Whether you start from scratch or build an illustration using this library, you should be creating them in a way that the final output can inherit agency branding if applicable. To do so, use one base color for the primary elements in the illustration and apply opaque black and white layers on top to create the necessary shades.  \nHero illustration example This example shows what it looks like when the base color is changed on the pieces that make up the illustration.\n  \n\r\rSpot illustrations Spot illustrations are a simplified version of our hero illustrations that can be used anywhere that needs more visual interest than our system icons can provide. These illustrations fall between the hero illustrations and system icons in our visual hierarchy. Spot illustrations can greatly improve the user experience by visually explaining a complex feature, introducing new concepts, and delighting our users.\nSpot illustrations are typically found within empty states, introduction screens, dashboard modules, confirmation screens, and error pages. They are used to fill empty space and quickly convey a message to the user that could otherwise be easily overlooked.\nMore details about spot illustrations and how to create them can be found on our spot illustrations confluence page.  \nSpot illustration anatomy  Organic gray background shape Grayscale core illustration Colored supplementary illustration  The core illustration is primarily line art, but uses 3 values (dark, midtone and white) to convey depth.\nThe supplementary illustration is always located in the lower right corner. While these illustrations are colored the different shades are created by using opaque black and white on top of one solid color shape. This allows the final illustrations in our products inherit agency branding where applicable.  \nSpot illustration examples    \n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/developers/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " There are two ways you can use ZUI 4 in your application: install the packages via Yarn or NPM; or slap our bad boy ZUI loader CDN script and stylesheets into your application.\n Install ZUI packages If you want an à la carte experience, you can install individual ZUI 4 component packages via Yarn or NPM.\nSince most Zywave packages are private, include a .yarnrc or .npmrc file in your parent directory and point it to the registry:\n# yarnrc \u0026#34;@zywave:registry\u0026#34; \u0026#34;http://packages.zywave.com/npm/private-npm/\u0026#34; # npmrc @zywave:registry=http://packages.zywave.com/npm/private-npm/  After that, you can now access all Zywave packages and install all the things, including ZUI:\n# Yarn yarn add @zywave/[zui-package] # NPM npm install @zywave/[zui-package] # Tip: Include @next at the end of your ZUI page name to get the most recent pre-released version # For example: yarn add @zywave/zui-shell@next Don\u0026rsquo;t forget to provide polyfills for our favorite browser Internet Explorer 11!\n Where do I find a list of released ZUI packages to install?  Search for @zywave at npmjs.com Check out our monorepo for all available packages  ZUI loader CDN For a plug and chug experience, the ZUI loader is the perfect solution to quickly get started! Gain access to all of our components, most web components polyfills, and stylesheets without having to install a single package. This is a popular choice among developers when building a new application.\nDetermine if your application requires stable third-party components  If yes, get the most recent stable version here: https://unpkg.com/@zywave/zui-bundle@latest/dist/ If no, get the most recent pre-released version here: https://unpkg.com/@zywave/zui-bundle@next/dist/ There are three required files in order for the ZUI CDN to work properly in every application zui-bundle.fouc.css - required for a smooth transition while all the scripts on the page loads, especially for Internet Explorer 11 zui-bundle.app.css - required for resetting styles for all base elements in your application zui-loader.js - required to load ALL ZUI components properly, including most polyfills for Internet Explorer 11  Place the script and stylesheets in your application \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Installation | Zywave User Interface\u0026lt;/title\u0026gt; \u0026lt;!-- These two stylesheets should always be listed before all other application styles --\u0026gt; \u0026lt;!-- Make sure `zui-bundle.fouc.css` is always listed first to counter FOUC --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/@zywave/zui-bundle@4.0.4/dist/css/zui-bundle.fouc.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/@zywave/zui-bundle@4.0.4/dist/css/zui-bundle.app.css\u0026#34; /\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/@zywave/zui-bundle@4.0.4/dist/zui-loader.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; Sometimes, the ZUI CDN loads faster than the elements in existing/legacy applications which causes rendering issues. This is also true for dumb Internet Explorer 11. If this is the case for you, instead of placing `zui-loader.js` in the \u0026lt;head\u0026gt;, place it at the bottom of your page. \u0026lt;!-- If I load too fast for the application, allow me to take a chill pill down here --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/@zywave/zui-bundle@4.0.4/dist/zui-loader.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/html\u0026gt; Note: as of writing this documentation, version 4.0.4 was the most recent stable version.\n Can I use distribution tags such as @next for my ZUI loader script? We do not recommend this method since we cannot guarantee the stability of our releases in combination with your application. While it may be more convenient to use a tag, we highly recommend you to lock down your version of ZUI, especially for production environments.\n"
},
{
	"uri": "http://zui.zywave.com/developers/lit/",
	"title": "Lit 🔥",
	"tags": [],
	"description": "",
	"content": " About lit-html is a very lightweight library whose sole purpose is to make updates to the DOM as cheap as possible. It uses a feature of JavaScript called tagged template literals to be able to efficiently rerender only the portion of the DOM that actually needs to be updated (unlike other libraries, such as React, that use a technique called the \u0026ldquo;Virtual DOM\u0026rdquo;, or \u0026ldquo;VDOM\u0026rdquo;). I won\u0026rsquo;t bore you with all of the extra details, but if you\u0026rsquo;re interested, it\u0026rsquo;s worth reading their documentation.\nLitElement builds on top of lit-html to make developing performant custom elements a piece of cake. It exposes a class called LitElement that implementers should extend. That class has a protected method, render(), that must be implemented and is the hook for a custom element to dynamically render its DOM via lit-html\u0026rsquo;s html` template literal tag.\nWe\u0026rsquo;ll refer to both of these libraries together as lit 🔥\nWhy lit? The ZUI group evaluated several web component libraries; we actually came pretty close to doing Polymer itself. Luckily, we came in right as lit-html was taking off, so we got the cheaper, better cousin to Polymer.\nWe also considered just extending HTMLElement and writing our own elements, but the boilerplate to get one of those off the ground is insane, especially when you consider some of the more complex components we have in our toolkit.\nUseful Links    Name Link Note     lit-html documentation https://lit-html.polymer-project.org/ Official documentation for lit-html   LitElement documentation https://lit-element.polymer-project.org/ Official documentation for LitElement   lit-html repo https://github.com/polymer/lit-html    LitElement repo https://github.com/polymer/lit-element    Polymer Slack https://polymer.slack.com registration: https://polymer-slack.herokuapp.com/ Official Polymer chat; many Polymer devs sit in the channel watching discussion and participate when they can. Other devs use as a place to discuss/get help with Polymer    "
},
{
	"uri": "http://zui.zywave.com/communications/messages/",
	"title": "Messages",
	"tags": [],
	"description": "",
	"content": " What is a message? A message is a communication with the user\u0026mdash;one that\u0026rsquo;s supposed to convey ideas and evoke a positive emotional response. When thinking about messages, it\u0026rsquo;s essential to think about the content of that communication first, before considering the proper way to style it.\nIn other words, messages consist of two components. First, there\u0026rsquo;s the message type, which refers to the kind of content the message needs to convey. Then, there\u0026rsquo;s the delivery system, which refers to the design element used to present that content.\nIn order to build an effective message, think about what the user needs to know, when they need to know it, and what delivery systems are available to convey the message.\n Delivery systems Delivery systems are the vehicles we use to convey a message to the user. Remember, the message type\u0026mdash;the information conveyed, the audience, the context on the page, etc.\u0026mdash;should determine the type of delivery system used, not the other way around.\nWell A non-dismissible container with text. For more information, see Wells.\n Toast An unobtrusive, dismissible piece of text in a window element. For more information, see Toast.\n Dialog Text displayed in a content box layered above the current page. For more information, see Dialog.\n Tooltip A short, helpful piece of text produced by hovering, often an icon next to the field it is referencing. For more information, see Tooltip.\n Popover Text displayed in a content box adjacent to the form field or page section it applies to, that opens and closes with a click.\n Uncontained text Any text without styling around it. Uncontained text is available on screen at all times to give direction and context to the page or section.\n   Message types The message type refers to the specific content the message needs to convey. In addition to the information that the message contains, message type also considers the importance of the message as well as the tone of the message.\nGeneral instruction General instructions are basic page instructions or page section descriptions. General instruction messages provide context, letting the user know where they are or what they can do.\nDelivery systems Uncontained text\nGuidance Guidance text offers the user additional information, instruction or context, and usually applies to a specific page element or action. Unlike alerts, guidance precedes the user\u0026rsquo;s action and shouldn\u0026rsquo;t interrupt a workflow. In other words, guidance may be helpful, but shouldn\u0026rsquo;t be necessary for a user to complete their desired action.\nThere are three general kinds of guidance messages\u0026mdash;suggestions, information and warnings. The boundaries between these kinds of messages may not always be distinct, and often the same set of facts could be conveyed in more than one kind of guidance message. That\u0026rsquo;s why it might be helpful to think of these kinds of message as being on a continuum.\nThe importance of the message and desired tone will ultimately determine whether we think of a message as a suggestion, a piece of information, or a warning. That will also help determine the best the type of delivery system for the message.\nSuggestion A suggestion conveys a best practice, ideal workflow or other supplemental information. Suggestions offer specific tips that could make actions easier for many users, but may not apply to all users, and are not strictly necessary to complete the actions at hand.\nDelivery systems  Well Uncontained text    Information\nInformation guidance gives the user additional information or context that they might find useful. Unlike a suggestion, which mentions best practices or ideal workflows, information takes a neutral stance and does not necessarily advocate for a specific course of action.\nDelivery systems  Well Tooltip Popover Uncontained text   \nWarning\nWarning guidance informs the user of the potentially undesirable outcome of a future action. Unlike warning alerts\u0026mdash;which interrupt the user\u0026rsquo;s workflow and require additional action before proceeding\u0026mdash;the user does not have to acknowledge or otherwise interact with warning guidance. The severity of the potential harm will often determine whether warning guidance or a warning alert is appropriate.\nDelivery systems  Well   \n Alerts Alerts inform the user about the outcome of an action—either an action taken by the user or an action that\u0026rsquo;s the result of a system process. Unlike guidance, alerts may interrupt a user\u0026rsquo;s workflow and require additional action to be taken before allowing the user to proceed. Often, alerts inform the user of the outcome of a validation check.\n  Information alert Information alerts tell the user that something has happened as the result of an action, but not necessarily as the result of an action that the user has taken.\nDelivery systems Toast\nDialog\n Success alert A success alert tells the user that an attempted action has succeeded.\nDelivery systems Toast\nUncontained text\n Warning alert A warning alert tells the user about a risk of irreversible destruction to data. Warning alerts are more emphatic than warning guidance messages are and require user action.\nDelivery systems Dialog\n Fail alert A fail alert tells the user that an attempted action or product feature has failed.\nDelivery systems Toast\nWell\nUncontained text\n  "
},
{
	"uri": "http://zui.zywave.com/components/notifiers/",
	"title": "Notifiers",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat is a notifier? Notifiers are unobtrusive messages that provide the user with simple and frequent feedback as a result of the action a user has taken or a system process. These messages should not be critical for the user to read and there should be no action included within them.\nInformative, Success and Error/Failure are the types of messages that can be displayed as notifiers.\nWhen to use notifiers The notifier can be used for 2 different kinds of messages, Guidance and Alerts. The following are the types of guidance and alert messages that can be a notifier\nGuidance - Communicating information with the user Informative - Gives the user general information as guidance - such as informing them of an enhancement to the product\nAlerts - Inform the user about the outcome of an action - either taken by the user or as a result of a system process Information - Gives the user general information - such as notifying the user of a document ready for review.\nSuccess - Notifies the user their action was successful - such as informing the user that their import was successful.\nError/Fail - Informs the user of server-side issues or errors that are not at the fault of the user - such as lost internet connection.\nNOTE: Error/Failure notifiers should not be used when the issue is caused by an action the user has taken! These messages should be more prominent such as a well or dialog.\nNotifier anatomy Notifiers contain a colored bar and icon to identify what type of message you are sending the user. Each notifier will have a title and short message. Notifiers should be on a timer and disappear on their own, but will still have a dismiss X in the upper right corner. A drop shadow should be applied to signify that the notifier is above all the content in z-space\nColors\n Success - Green 400 Informative - Blue 400 Error - Red 400  Icons\n 16x16px A 24px colored circle behind icon (color matches type of notifier)  Container - sizing and spacing\n Container is 400px wide Min height: 86px | Max height: 126px Solid white background with a 10px colored bar at the top (The color will match the type of message) 10px padding from right and left 20px padding from top and bottom  Title\n Titles should remain on 1 line 16px bold ZUI Gray 800   Message\n Messages support the title and give direction 14pt, regular, ZUI Gray 800 No longer than 3 lines. If the message needs to be longer, consider an alternative delivery system (well or dialog).  Notifer behavior Dismiss\n Notifiers should disappear on their own after a certain amount of time. Notifiers will also have an X in the upper right corner that will allow the user to dismiss the message.\n  Notifier location Notifiers appear in the upper right corner of the screen above the content in z-space.\n\r\rTable of Contents  ZuiNotifier  Example _computeIcon  Parameters  show hide  header type type parentSelector duration show  Parameters   ZuiNotifier Extends ZuiBaseMixin(PolymerElement)\nExample \u0026lt;zui-notifier id=\u0026#34;notifier\u0026#34; type=\u0026#34;success\u0026#34; header=\u0026#34;Nice job!\u0026#34; description=\u0026#34;Your one off email has been sent.\u0026#34;\u0026gt; _computeIcon Computes the _icon property.\nParameters  type string This determines which zui-icon this notifier will use. (\u0026lsquo;info\u0026rsquo;, \u0026lsquo;success\u0026rsquo;, \u0026lsquo;warning\u0026rsquo;, or \u0026lsquo;error\u0026rsquo;)  show Displays the notifier at the top right of the screen. If parentSelector is set, it will place the notifier inside the first found element for the specified query selector.\nhide Hides the notifier.\nheader The static header of the notifier. If you don\u0026rsquo;t have dynamic text, otherwise use zui-notifier-controller.\ntype The static message of the notifier. If you don\u0026rsquo;t have dynamic text, otherwise use zui-notifier-controller.\ntype The static type of notifier. If you don\u0026rsquo;t have dynamic text, otherwise use zui-notifier-controller. The types of notifier include: \u0026lsquo;info\u0026rsquo;, success\u0026rsquo;, \u0026lsquo;warning\u0026rsquo;, \u0026lsquo;error\u0026rsquo;\nparentSelector The static parentselector to determine the parent of the notifier. If you don\u0026rsquo;t have dynamic text, otherwise use zui-notifier-controller. If this parameter is not set then the default is the display the notifer in the top right of the document body. Syntax would be standard query selector language (i.e #parentDiv would search for a div id of \u0026ldquo;parentDiv\u0026rdquo; and display the notifer in the top right corner of that div tag).\nduration The amount of time, in milliseconds, this notifier should persist\nshow Shows the notifier using specified parameters\nParameters  type string This determines which zui-icon this notifier will use. (\u0026lsquo;info\u0026rsquo;, \u0026lsquo;success\u0026rsquo;, \u0026lsquo;warning\u0026rsquo;, or \u0026lsquo;error\u0026rsquo;) header string This is the header of the notifier message\n duration\n description string This is the header of the description  \r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/developers/polyfills/",
	"title": "Polyfills",
	"tags": [],
	"description": "",
	"content": " First, if you\u0026rsquo;re using @zywave/bundle (and more importantly, the zui-loader.js provider), you most likely DON\u0026rsquo;T have to worry about everything on this page except for polyfilling CSS custom properties. But, if you\u0026rsquo;re curious, here\u0026rsquo;s everything that needs to exist for ZUI to work in the browser that shall not be named.\n Required polyfills @webcomponents/webcomponentjs Until this chart shows all green for browsers we support, you\u0026rsquo;ll need this library. Don\u0026rsquo;t worry, it does feature detection, so as browsers start supporting more and more, the polyfill will get lighter and lighter.\n99% of the time, you can just pull in webcomponents-loader.js and you\u0026rsquo;re good to go. However, if you\u0026rsquo;re using Babel (or some comparable transpiler) to get ZUI to be consumable by a browser that doesn\u0026rsquo;t recognize ES6 classes, you\u0026rsquo;ll ALSO need to pull in custom-elements-es5-adapter.js, and ONLY pull it in browsers that understand what a custom element is (so for most of you, that\u0026rsquo;s all browsers except Internet Explorer 11 and Edge).\nIt\u0026rsquo;s highly recommended that you deliver ES6 class transpiled ZUI to Internet Explorer 11 and Edge, and native ES6 classes to everyone else. But, that\u0026rsquo;s on you.\n Promise polyfill If targeting Internet Explorer 11, you\u0026rsquo;ll need a promise polyfill. There\u0026rsquo;s no shortage of options on this front; if you don\u0026rsquo;t explicitly load your own promise polyfill, @webcomponents/webcomponentsjs will give you promise-polyfill.\n @webcomponents/shadycss For Internet Explorer 11 and Edge, you\u0026rsquo;ll need to do the following:\n Install @zywave/zui-custom-style Install @webcomponents/shadycss  You\u0026rsquo;ll get this for free, but you\u0026rsquo;ll need to include custom-style-interface.min.js in your index file. This is where the magic happens.  Preferred method: Wrap your important CSS custom properties in the document like in the example below. Your stylesheet imports (\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;application.css\u0026quot; /\u0026gt;) will need to be switched to \u0026lt;zui-custom-stylesheet href=\u0026quot;application.css\u0026quot;\u0026gt;\u0026lt;/zui-custom-stylesheet\u0026gt; if they contain CSS custom properties (e.g. --zui-button-color: green;).  Note: Please, only use this if the browser is Internet Explorer 11 or Edge; we can\u0026rsquo;t guarantee that any performance enhancements the browsers provide for rel=\u0026quot;stylesheet\u0026quot; is properly replicated. For starters, you\u0026rsquo;re blocked by the main thread so that JavaScript can be loaded and executed before your styles can even be loaded. Not cool. There are some really weird race conditions with this one. If you see issues, log it to ZUI\u0026rsquo;s issue here: https://gitlab.zywave.com/zui/zui/issues/201   \u0026lt;zui-custom-style\u0026gt; \u0026lt;style\u0026gt; html { --zui-shell-primary-theme: #2e2e2e; --zui-shell-primary-theme-dark: #2e2e2e; --zui-shell-profile-avatar-background: #51515a; } \u0026lt;/style\u0026gt; \u0026lt;/zui-custom-style\u0026gt; Even if you use the zui-loader.js, you still need to wrap all CSS custom properties in \u0026lt;zui-custom-style\u0026gt; in your applications if you want them to work in Internet Explorer 11.\nPolyfilling ZUI Colors and other CSS custom properties CSS custom properties, also known as CSS variables, are not supported in Internet Explorer 11 and never will be. If you want to use static CSS custom properties\u0026mdash;such as our ZUI Colors\u0026mdash;in your applications and cannot wrap them in \u0026lt;zui-custom-style\u0026gt;, consider installing @postcss/postcss-custom-properties. This polyfill will provide fallback values for style properties in Internet Explorer 11.\n:root { --zui-red-400: #ee562f; } .error-text { color: var(--zui-red-400); } /* becomes */ :root { --zui-red-400: #ee562f; } .error-text { color: #ee562f; color: var(--zui-red-400); } postcss-custom-properties doesn\u0026rsquo;t support dynamic CSS variables. Whatever value is defined at the root level will be the final output.\n"
},
{
	"uri": "http://zui.zywave.com/foundations/product-branding/",
	"title": "Product branding",
	"tags": [],
	"description": "",
	"content": " Standard Zywave corporate logos The standard Zywave corporate logo should be used in most cases. The logo with a tagline is preferred over the one without. The Zycon is typically used as a subtle motif that reinforces our brand and should never be used in place of the Zywave logo.\nWith tagline\n Without tagline\n Zycon\n   Download Zywave corporate logos  Download PNG  Download EPS\n Variations Grayscale and white logo variations are generally preferred. White logos should appear on a field of color. Typically this will be one of our standard grays or Zywave green.\nGrayscale\n White on gray background\n White on Zywave Green background\n   Clear space Surround the Zywave logo with enough clear space so that it is clearly visible. This will maximize the recognition and impact of our identity. There are some instances—such as in our product headers—where including an ample amount of clear space is not necessary and can be omitted.\nThe Zywave chevron can be used to determine the appropriate amount of clearspace.\n Logo abuse It is extremely important to use our logo as described in these guidelines. Deviating from the prescribed usage compromizes the integrity of Zywave\u0026rsquo;s brand. The examples shown here should be avoided at all costs.\nIf you alter the Zywave logo in any way or attempt to squeeze it in somewhere, then you\u0026rsquo;re probably doing it wrong. Stop it!\nMiscolored—this simply doesn\u0026rsquo;t look good!\n Tilting our logo doesn\u0026rsquo;t make it coool or fun.\n This is too small. Every part of our logo should be legible.\n Squeezing the logo might make it fit in your powerpoint, but it doesn\u0026rsquo;t fit with our brand.\n Pairing the Zywave logo with the Zycon is unnecessary and muddies our brand.\n Putting our logo on top of an image hinders visibility and legibility. Don\u0026rsquo;t do it!\n  "
},
{
	"uri": "http://zui.zywave.com/components/radio-buttons/",
	"title": "Radio buttons",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\r\r\rWhat are radio buttons? A radio button is a selection control that allows the user to make a single selection. Unlike some other selection controls, radio buttons display all of the options, so the user has a chance to see all options before making a selection. They most commonly appear in forms.\n When to use radio buttons Use a radio button when the user must select a single option from a list of mutually exclusive options less than 10. Meaning that a user can choose only one option, and once an option is selected, the previous option deselects.\nAlternate considerations  Use a dropdown multi-select if zero or more options can be selected and for lists larger than 10 items. Use a dropdown select if only one option can be selected and for lists larger than 10 items. Use a checkbox if zero or more options can be selected or for lists smaller than 10 items. Use a toggle if the options are two opposing states such as a yes or no, on or off.   Style variations Standard radio button Standard radio buttons are the most common. They allow the user to make a selection and quickly move on to the next task.\n Use when the number of options is easy for the user to process, generally fewer than 10. Unless you want to emphasize the selection, this is usually the radio button you should use.   Inline radio button Inline radio buttons are more prominently styled than standard radio buttons. They often feature an icon, and they’re designed to emphasize the selection being made.\n Reserve for especially important selections. Limit the number of options to what can fit on a single line. Use an icon, if appropriate, to further emphasize the importance of the selection. Don\u0026rsquo;t use multiple groups of inline radio buttons on the same page.   Gallery radio button Gallery radio buttons are more prominent than both standard and inline radio buttons. They often feature an icon and take up a great deal of space on the page.\n Because they\u0026rsquo;re so large, they should generally be reserved for when there is only one selection the user can make on that page. Icons both emphasize the selections and reinforce the contrast between the options.   Anatomy    \nFor detailed documentation on our radio button anatomy, view the ZUI radio button design specs.\nStandard radio buttons  Radio button height and width will always be 24px Clickable area of the radio button will always be 36px, and include the label if applicable System font, size 14px, regular  Inline radio buttons  Radio button height will always be 42px, button width is determined by the length of the text 0px margin between radio buttons, the buttons should be connected and added to the right of the first System font, size 14px, semibold  Gallery radio buttons  Radio button height and width is determined by height and width of text System font, size 14px, semibold   Radio button states Normal Normal state is the initial state of the radio button when the page first loads and before any action is taken.\nHover Hover state occurs when the user hovers over the radio button with their mouse.\nFocus Focus state appears when the radio button is currently selected and awaiting action. This commonly occurs when using a keyboard to navigate.\nDisabled Disabled state occurs when an action currently isn’t available. Disabled radio buttons should only be used when an action can be taken within the current UI to enable the radio button. If no action can be taken to enable the radio button, then the radio button should be hidden instead of disabled.\n Radio button best practices DO  Radio buttons should always be used when there is a list of two or more options, up to 10, and the user must select only one.\n\nDO NOT  A single radio button should never be used alone.\n\n \nDO  Radio buttons should always have at least one option selected as default.\n\nDO NOT  A group of radio buttons should never be shown without a default selection.\n\n \nDO  Radio buttons should always have a label.\n\nDO NOT  A radio button without a label is unusable; the user will not know what selection they are making without text.\n\n\n For more information on selection controls and keyboard accessibility view form standards.\n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/developers/responsive-design/",
	"title": "Responsive design",
	"tags": [],
	"description": "",
	"content": " Mobile first approach We aim to provide the best user experience possible by taking a mobile-first approach. This means we design for the smallest screen size first (30em or 480px), then progressively enhance the experience as more screen real estate becomes available.\nBreakpoints Breakpoints are defined points or widths for your site\u0026rsquo;s content to respond to in order to provide the best possible layout for users to consume information.\nThere are 6 breakpoints available. The breakpoints are not named after devices because there are thousands of them. Instead, we use t-shirt sizes. We recommend using ems in media queries for proper scaling across multiple devices.\n   Sizes Breakpoints in em Breakpoints in px     XXS 30em 480px   XS 45em 720px   S 60em 960px   M 64em 1024px   L 80em 1280px   XL 120em 1920px    *em units are based off the browser\u0026rsquo;s default font size of 16px\nDid you know we provide SCSS variables for these breakpoints in the ZUI Toolkit?\n Why use em values for media queries? During our research, we found that pixels, which are an absolute unit, do not scale appropriately across multiple devices due to various pixel densities. ems, however, are relative to their direct or nearest parent font size and do a better job of scaling and are more precise. Also, they are more widely supported than rems, so we recommend using ems for all media queries.\nFont sizes With ZUI 4, all applications should set their root font size to 100%, which usually equates to 16px and is the default browser font size. Then, set your body font size in rem. This helps with accessibility, zooming, and different pixel densities.\nhtml { font-size: 100%; /* 16 */ } body { font-size: 0.875rem; /* 14 / 16 */ } CSS units Ah, the classic debate on which CSS unit to use.\nWe\u0026rsquo;ve provided some guidelines below to help you choose the best unit for your project. In ZUI, we encourage the use of ems, rems, and percentages wherever possible because they are scalable and accessible.\n   Name Unit Description     Pixel px Absolute unit   Percent % Relative to the same property of the parent element   Em em Relative to its direct or nearest parent font size   Root em rem Relative to the root element\u0026rsquo;s font size   Viewport width vw 1% of the width of the initial containing block (root element)   Viewport height vh 1% of the height of the initial containing block (root element)     Pixel (px) Pixels are only recommended for spacing and layout, but not for font-size. As an absolute unit, pixels do not scale if users increase their browser font size. A great example of when to use pixels is border widths.\nStill not sure if you should be using pixels? If scaling and proportions are important, you probably shouldn\u0026rsquo;t use pixels. Use relative units instead.\nPercent (%) Percents are great for creating a fluid layout, or for scaling purposes. Elements will resize to a defined percentage of the total space available to them, provided by their parent container. Setting an image\u0026rsquo;s size in percents will allow it to grow and shrink as the screen real estate changes.\nem ems are recommended for font sizes and when proportions are important. An em is equal to its parent\u0026rsquo;s font size. For example, if a container\u0026rsquo;s font size is set to 30px, then 1em is equal to 30px and 2em is equal to 60px.\nrem rems are also recommended for font sizes and when proportionsa are important, with one caveat that they will always be relative to the root element\u0026rsquo;s (\u0026lt;html\u0026gt;) font size. For example, if a root element\u0026rsquo;s font size is set to 16px, a container\u0026rsquo;s font size is set to 18px, but its padding is set to 1rem, the 1rem equates to 16px.\nViewport width (vw) vw is similar to % with the exception that it depends on the width of the viewport and not its parent element. This unit is best used when your element relys on the width of the viewport, regardless of its parent container.\nViewport height (vh) vh is also similar to % with the exception that it depends on the height of the viewport and not its parent element. This unit is best used when your element relys on the height of the viewport, regardless of its parent container.\nCSS unit conversions Provided below are two formulas for the most common unit conversions.\npx to rem [pixel] / [root font size] = [new rem value] # example 30px / 16px = 1.875rem px to % [pixel] / [parent container width] * 100 = [new % value] # example 600px / 1024px * 100 = 58.59375%"
},
{
	"uri": "http://zui.zywave.com/foundations/shell/",
	"title": "Shell",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat is Shell? The Shell wraps around all of our applications and provides suite level consistencies, branding, and common functionality. It helps the user in understand and naviagate the core of the Zywave suite.\nAnatomy The shell includes 4 core sections which surround the content standard content area, Topbar, Side nav, and footer. For a consistent user experience, use all 3 core shell components when building applications.\n1. - Topbar The Top bar is the section reserved at the top of the page that provides applicatino branding, suite-level navigation, and high priorty fucntionality such as search. For more detailed information, view Topbar guidelines.\n2. - Sidenav The Side nav provides a standard place for navigation within a product. Placed on the left-hand side of the site, it lists out the application-specific site features you can click on and access, as well as features like settings, notifications, and help. For more detailed information, view Sidenav guidelines.\n3. - Footer The section at the bottom of the page which contains information that needs to be there, but doesn\u0026rsquo;t necessarily demand the user\u0026rsquo;s primary focus. The footer includes trademark, terms \u0026amp; conditions, privacy statement, DMCA, cookie usage, and contact information. For more detailed information, view Footer guidelines.\n4. - Content area The Content area is the the body of our applications where all the the features and funcionality gets placed. For more detailed information,view Content area guidelines\nSuite vs individual products Depending on if you are building a single point solution that will be sold individually, or a feature that fits into our suite with other feature of the same nature, the shell can change to accomdate an ideal user experience.\nExample: Shell for the Zywave suite.\n Example: Shell for a single point solution (ModMaster). The application bar becomes slightly larger to accomidate the application name.\nResponsive design The shell has been designed to tranisition itself for a better expereince on mobile devices. At our mobile breakpoint (≥720px), the side nav becomes heeden off screen and slides in when the menu button his pushed. For a detailed list of what happens in each 4 core sections, please visit those sections.\n  \n\r\rTable of Contents  ZuiShell  Example appName  ZuiShellTopBar  Example noAppBar noScrollAnimation searchOpen _topbarWrapper _slotSearch _slotDefault  ZuiShellApps  Examples appHeader allAppsUrl allAppsText open _getAppsListHtml  Parameters   ZuiShellAppsItem  Examples name description url target  ZuiShellNav  open collapsed collapseLabel  ZuiShellNavItem  Examples expanded subnav  ZuiShellFooter  Example  ZuiShellContent  Example  ZuiShellUser  givenName familyName profileName profileDetail username manageUserUrl logoutUserUrl manageProfileUrl switchProfileUrl avatar userHeader profileHeader manageUserText logoutUserText manageProfileText switchProfileText open notificationCount notificationHeader viewNotificationTitle noNotificationTitle viewNotificationText viewNotificationUrl impersonating impersonatingAction impersonatingProfileName impersonatingGivenName impersonatingFamilyName unauthenticated loginUserText loginUserUrl   ZuiShell Extends ZuiShellBaseMixin(ZuiBaseElement)\nThe Shell must wrap all zui-shell components in order for applications to render styles and functions correctly.\nExample \u0026lt;zui-shell app-name=\u0026#34;ZUI Documentation\u0026#34; unresolved\u0026gt; \u0026lt;zui-shell-topbar unresolved\u0026gt;\u0026lt;/zui-shell-topbar\u0026gt; \u0026lt;zui-shell-nav unresolved\u0026gt;\u0026lt;/zui-shell-nav\u0026gt; \u0026lt;zui-shell-content unresolved\u0026gt;\u0026lt;/zui-shell-content\u0026gt; \u0026lt;zui-shell-footer unresolved\u0026gt;\u0026lt;/zui-shell-footer\u0026gt; \u0026lt;/zui-shell\u0026gt; appName The user-friendly name for this application.\nZuiShellTopBar Extends ZuiShellBaseMixin(ZuiBaseElement)\nThere are two parts to the topbar: global and app. The top white bar is our global topbar, which has Zywave branding and includes global functionality. The bottom colored bar is our app bar, which is tailored to the application or Cloud the user is in. Sometimes it is branded with the product name if not part of a Cloud.\nExample \u0026lt;zui-shell-topbar no-appbar no-scroll-animation unresolved\u0026gt; \u0026lt;zui-logo unresolved\u0026gt;\u0026lt;/zui-logo\u0026gt; \u0026lt;zui-search unresolved\u0026gt;\u0026lt;/zui-search\u0026gt; \u0026lt;/zui-shell-topbar\u0026gt; noAppBar To only want to include the global topbar and not the app bar (Optional)\nnoScrollAnimation To opt out of the topbar\u0026rsquo;s off-screen scrolling animation. (Optional) Internet Explorer 11 does not include this animation.\nsearchOpen Only to detect if search is open on mobile\n_topbarWrapper Query topbar wrapper to show and hide based on window scroll\n_slotSearch Query elements assigned to the search slot For search components only\n_slotDefault Query elements assigned to the default slot Backwards compatibility for search components only\nZuiShellApps Extends ZuiShellBaseMixin(ZuiBaseElement)\nzui-shell-apps is our product launchpad and is a topbar feature. This is the primary method of jumping from application to application. Consumers should set this up to only list products the user has access to.\nExamples Default\n\u0026lt;zui-shell-apps unresolved\u0026gt; \u0026lt;zui-shell-apps-item unresolved slot=\u0026#34;apps\u0026#34; name=\u0026#34;Broker Briefcase\u0026#34; description=\u0026#34;Growth \u0026amp; marketing platform\u0026#34; url=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;/zui-shell-apps-item\u0026gt; \u0026lt;/zui-shell-apps\u0026gt; With an optional \u0026ldquo;view all apps\u0026rdquo; link\n\u0026lt;zui-shell-apps all-apps-url=\u0026#34;http://www.zywave.com\u0026#34; all-apps-text=\u0026#34;See all products\u0026#34; unresolved\u0026gt; \u0026lt;zui-shell-apps-item unresolved slot=\u0026#34;apps\u0026#34; name=\u0026#34;Broker Briefcase\u0026#34; description=\u0026#34;Growth \u0026amp; marketing platform\u0026#34; url=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;/zui-shell-apps-item\u0026gt; \u0026lt;/zui-shell-apps\u0026gt; appHeader Header for the apps dropdown. (Default: Apps)\nallAppsUrl Link to view all apps in a separate location. Set this property if you want the \u0026ldquo;See all\u0026rdquo; links to appear at the bottom of your apps list. (Optional)\nallAppsText Text for the link to view all apps in a separate location. Will not show up if all-apps-url is not set. (Optional)\nopen Opens the dropdown menu when open is set to true.\n_getAppsListHtml Parameters  allAppsUrl string Shows the link to view all apps at the very bottom of the apps list when set.  ZuiShellAppsItem Extends ZuiShellBaseMixin(ZuiBaseElement)\nChild element of zui-shell-apps that renders into a link for each product the user has access to.\nExamples Default\n\u0026lt;zui-shell-apps-item unresolved slot=\u0026#34;apps\u0026#34; name=\u0026#34;Broker Briefcase\u0026#34; description=\u0026#34;Growth \u0026amp; marketing platform\u0026#34; url=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;/zui-shell-apps-item\u0026gt; With an optional target\n\u0026lt;zui-shell-apps-item unresolved slot=\u0026#34;apps\u0026#34; name=\u0026#34;Broker Briefcase\u0026#34; description=\u0026#34;Growth \u0026amp; marketing platform\u0026#34; url=\u0026#34;#\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt; \u0026lt;/zui-shell-apps-item\u0026gt; name Name of the application.\ndescription Description of the application.\nurl URL to the application.\ntarget Specify where to open the link. Default opens in a new tab. (Optional)\nZuiShellNav Extends ZuiShellBaseMixin(ZuiBaseElement)\nThe Shell collapsible side nav that houses the application\u0026rsquo;s primary navigation. On medium screen sizes, the side nav automatically collapses to give users more screen real estate. Users can choose to expand it if they prefer.\nopen Indicates whether the side nav is open or not. (MOBILE ONLY)\ncollapsed Indicates when the side nav is collapsed.\ncollapseLabel For customizing the text for the collapse button at the bottom of the side nav. The default value is \u0026ldquo;Collapse.\u0026rdquo;\nZuiShellNavItem Extends ZuiShellBaseMixin(ZuiBaseElement)\nChild element of zui-shell-nav that renders into a link. Top-level menu items must be accompanied by an icon. Children menu-items do not need an icon.\nExamples For a top-level menu item with no children items\n\u0026lt;zui-shell-nav-item unresolved\u0026gt; \u0026lt;zui-icon icon=\u0026#34;zui-nav-home\u0026#34; slot=\u0026#34;icon\u0026#34; unresolved\u0026gt;\u0026lt;/zui-icon\u0026gt; Home \u0026lt;/zui-shell-nav-item\u0026gt; For a top-level menu item with children items\n\u0026lt;zui-shell-nav-item unresolved\u0026gt; \u0026lt;zui-icon icon=\u0026#34;zui-nav-activities\u0026#34; slot=\u0026#34;icon\u0026#34; unresolved\u0026gt;\u0026lt;/zui-icon\u0026gt; Activities \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Basic\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Account\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; active\u0026gt;Carrier\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Mass add\u0026lt;/a\u0026gt; \u0026lt;zui-shell-nav-item\u0026gt; expanded This property becomes true when \u0026lt;zui-shell-nav-item\u0026gt; has children items and is expanded. All parent menu items are collapsed by default.\nsubnav This property becomes true when there are more than one anchor tag in \u0026lt;zui-shell-nav-item\u0026gt;.\nZuiShellFooter Extends ZuiShellBaseMixin(ZuiBaseElement)\nExample \u0026lt;zui-shell-footer unresolved\u0026gt; \u0026lt;div\u0026gt;\u0026amp;copy; 1995 - 2019 Zywave, Inc. All rights reserved.\u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;zui-link\u0026#34; target=\u0026#34;_blank\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Terms and Conditions\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;zui-link\u0026#34; target=\u0026#34;_blank\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Privacy Statement\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;zui-link\u0026#34; target=\u0026#34;_blank\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;DMCA\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;zui-link\u0026#34; target=\u0026#34;_blank\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Cookie Usage\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;zui-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; \u0026lt;/zui-shell-footer\u0026gt; ZuiShellContent Extends ZuiShellBaseMixin(ZuiBaseElement)\nExample \u0026lt;zui-shell-content unresolved\u0026gt; \u0026lt;div class=\u0026#34;zui-layout\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Hello world!\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/zui-shell-content\u0026gt; ZuiShellUser Extends ZuiShellBaseMixin(ZuiBaseElement)\nTopbar feature that encompasses information about the User Principle, User Profile, impersonation, and notifications.\ngivenName The first name of the user. It should be set to the given_name claim of the user principal. This may not yet be available on some principals, but will be back filled with profile information by an upcoming auth release. This component gracefully falls back to username.\nfamilyName The last name of the user. It should be set to the family_name claim of the user principal. This may not yet be available on some principals, but will be back filled with profile information by an upcoming auth release. This component gracefully falls back to username.\nprofileName This is the display name of the profile in context and will vary from profile type to profile type.\nprofileDetail This is additional profile information displayed as subtext. It should generally represent the location and/or profile name. You may want to make this a function to ensure a clean rendering with the assumption of missing claims.\nusername This is the username of the user. It should be set to the preferred_username claim of the user principal.\nmanageUserUrl This is a URL to user self service tool. It should be set to https://profiles.zywave.com per environment.\nlogoutUserUrl This is a URL to the logout page of the application.\nmanageProfileUrl This is a URL to the proper edit page for the profile in context.\nswitchProfileUrl This is a URL to the local switch profile path. This should only be set if the user has multiple contextual profiles available.\navatar This is a URI of the avatar of the user. It should be set to the \u0026ldquo;picture\u0026rdquo; claim of the user principal.\nuserHeader This is the text that appears above the user section. Should be set to localized \u0026ldquo;User\u0026rdquo;.\nprofileHeader This is the text that appears above the profile section. Should be set to localized phrase representing the profile type such as \u0026ldquo;Agency Profile\u0026rdquo;, \u0026ldquo;Employer Profile\u0026rdquo; or just simply \u0026ldquo;Profile\u0026rdquo;.\nmanageUserText This is the text that appears as the manage user link. Should be set to localized \u0026ldquo;Manage User\u0026rdquo;.\nlogoutUserText This is the text that appears as the logout user link. Should be set to localized \u0026ldquo;Logout\u0026rdquo;.\nmanageProfileText This is the text that appears as the manage profile link. Should be set to localized \u0026ldquo;Manage Profile\u0026rdquo;.\nswitchProfileText This is the text that appears as the switch profile link. Should be set to localized \u0026ldquo;Switch\u0026rdquo;.\nopen Boolean for when the user dropdown is open.\nnotificationCount This is the how many unread notifications the user/profile has. Get by calling Shared.Notifications Service.\nnotificationHeader This is the text that appears above the notification section.\nviewNotificationTitle This is the text that appears after the notification count in profile section.\nnoNotificationTitle This is the text that appears when there are no new notifications in the notifications section of the user dropdown.\nviewNotificationText This is the text that appears as the notification inbox link.\nviewNotificationUrl This is a URL to the notification inbox (ex: dev-zh.zywave.com/notifications/inbox).\nimpersonating This property is required for all the impersonation properties to work and show.\nimpersonatingAction Text for the current user impersonating another profile.\nimpersonatingProfileName Name of the profile the current user is impersonating.\nimpersonatingGivenName First name of the user associated with the profile the current user is impersonating.\nimpersonatingFamilyName Last name of the user associated with the profile the current user is impersonating.\nunauthenticated Indicates that the user is currently unauthenticated, and should be given access to login.\nloginUserText This is the text that displays to unauthenticated users to login.\nloginUserUrl The url where unauthenticated users can be redirected to login.\n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/foundations/sidenav/",
	"title": "Sidenav",
	"tags": [],
	"description": "",
	"content": " What is a Sidenav The Side nav contains the majority of the application and suite level navigation. This includes the applications feature level nagivation as well as access to notifications, settings, and help and training.\nWhen to use Sidenav The side navigation is a base component of the Shell. Having the navigation in a standard and reliable place helps grounds the user experience of all our products, so there should be a good reason if you\u0026rsquo;re not going to use it.\nWhat things go in the Sidenav The following are nav items that are recommended for every application, when applicable.\n Home - Every application should start with a home link at the top. This takes you to the home page of whatever application you are in. Product navigation links - These are the application links take the user to the features they have access to. Notifications - Application specific notifications, when applicaable. Settings - Application specific settings, when applicable. Help and Training - Links to application specific help and Zywave University. Collapse - Gives the user the ability to collapse the Sidenav for more working space in the content area.  Sidenav anatomy These are the building blocks of the Sidenav.\n Nav Item Nav Item Icon Expand Icon Nav Item (with children) Subnav Items Collapse action  Icon rules  All top level nav items should have a corresponding icon to help quickly identify the action. These icons are also used when the menu is collapsed. Child items do not have an icons associate with them. For more information view our icon standards  The three states of Sidnav  Expanded - At the breakpoint of ≥720 the full expanded side navigation are present. Collapsed - When the collapse button is pressed the menu will slim down to show only icons as main navigational items. Mobile - At the breakpoint of \u0026lt;720 the Sidenav is off screen and slides in from the left when the hamburger menu is pushed.  Behavior (expaned state)  Unselected Navitem - Font color: grey-700; font weight: 400; icon color: gray-800; background color: none Selected Navitem - Font color: blue-500; font weight: 700; icon color: blue-500; background color: none Expand \u0026amp; collapse action icon - When clicked the icon rotates 180 degrees. The icon should always point the direction the action will happen. Selected subnav item - Font color: blue-500; font weight: 700; icon color: blue-500; background color: none Hover - background color: Gray-50  Parent and children  When anywhere on a parent item is clicked, the children will appear below that parent item. Parent items are used only for organizational purposes to reveal their child subnav items, they aren\u0026rsquo;t linked to pages themselves. Parent items can all can be open at the same time to show all subnav item for the entire application. After a user clicks on a link, expanded navigation remains expanded. Don\u0026rsquo;t close the navigation until the user pushes to close it.  Scrolling  When the list of expanded items extends the entire height of the view port, a small scrollbar appears, allowing the user to scroll the Sidenav. The collapse nav item remains stuck to the bottom and not part of the scrolling section.  Collapsing the Sidenav  The user can collapse \u0026amp; expand the naviagtion by clicking the collapse button at the bottom of the Sidenav. When collapsed - The content area will respond and make more room for itself, taking up the area that the sidnav had been using. There is no need for the expand/collapse Sidenav function in the mobile state, so the button is hidden.  Behavior (collapsed state)  Unselected Nav item - icon color: gray-800; background color: none Selected Nav item - Slideout shows the full name of the navigation item. The user can then click the icon or the text to navigate to this page. icon color: blue-500; background color: none Hover Nav item with children - Slideout shows the Nav item name and list of subnav items. The user can then select the page they wish to navigate to in the list. Background color: gray-50; Hover Subnav item - background color: Gray-100 Selected item - Font color: blue-500; font weight: 700; background color: none  Behavior (mobile state)  The menu slides in over the content. To close the side nav the user will click off to the right of the navigation. Apps \u0026amp; Profile navigational items that were in the topbar will now appear in the sidenav.  Sizing \u0026amp; Spacing Use the following links to find exact pixel specs for each state of the Sidenav.\n Expanded state specs Collapsed state specs Mobile state specs   "
},
{
	"uri": "http://zui.zywave.com/patterns/step-flow/",
	"title": "Step flow",
	"tags": [],
	"description": "",
	"content": " What is a step flow? A step flow is a series of pages designed to walk the user through a defined workflow with a specific end.\nWhen to use Use step flows to focus the user on a single task and reduce the cognitive load of complex tasks in a single, related workflow.\nAlternate considerations  Use expanders to break long blocks of content into separate sections with independent workflows. Use tabs to break content into distinct workflows that can be completed independently, or to offer alternative views of the same information.  Back to top --  Live example (coming soon) * ZUI toolkit (coming soon) * GitLab repo (coming soon) -- Pattern basics Launching a step flow Step flows may appear in a number of different places in our products, and may be launched from a number of different components (e.g., buttons, links, etc.).\nFull-page overlay To focus user attention, we recommend a full-page overlay that animates in and covers the entire screen, including the top bar and side navigation. For different size considerations, see dialog.\nNavigation Basic navigation controls include \u0026ldquo;next\u0026rdquo; and \u0026ldquo;back\u0026rdquo; buttons in the lower right corner of the dialog, as well as an \u0026ldquo;exit\u0026rdquo; action in the upper right corner of the dialog.\nNumber of steps While there\u0026rsquo;s no fixed number, try to limit step flows to between 3 and 10 steps. Fewer than 3 can probably be combined onto a single screen, and more than 10 might better be served by breaking up the workflow differently (e.g., using tabs, multiple step flows, etc.).\nSee basic step flow anatomy specs\n   Back to top --  Context Intro screen  When possible and not redundant, it\u0026rsquo;s a good idea to include an intro page. The intro should reiterate the basic scope and purpose of the step flow. If completing a step flow will become impossible based upon the user\u0026rsquo;s answer to certain questions, it\u0026rsquo;s a best practice to include those questions on this intro page. That way, the user doesn\u0026rsquo;t enter a flow that\u0026rsquo;s impossible to finish.  See intro screen specs\n  Completion screen  In order to signal the end of the step flow, include a completion screen, which validates that the action has been completed. The completion screen can be dismissed by a single action button, and should indicate where the user will land upon clicking it.  See completion screen specs\n   Back to top --  Exiting and returning  Ideally, a user would complete a step flow in a single, uninterrupted session. However, sometimes, the user may want or need to leave before completing the step flow.  Designers and developers should decide whether or not the progress of an incomplete flow will be saved if exiting before complete. When the user clicks the exit button, a dialog will pop up to alert the user of the consequences of leaving (saving or not saving data) and asking for confirmation of the action.  A deep link into a step flow should take the user to the intro screen or, if there is no intro, the first step of the flow. The action on the completion screen always saves the user\u0026rsquo;s work. If returning to a saved step flow to edit or review information, you may want to include a text link that allows the user to skip straight to the end, or to the step flow\u0026rsquo;s review page. This link would appear after reaching the end and returning to a previous step or exiting and returning.  Back to top --  Step flow with a progress indicator  Only use a progress indicator if you know exactly how many steps are in the process. Both horizontal and vertical progress indicators are available.  For more information about the component itself, see the step progress indicator page.\n See step flow with a horizontal progress indicator specs\nSee step flow with a vertical progress indicator specs\n  Back to top --  Step flow without a progress indicator  Don\u0026rsquo;t use a step progress indicator if a step flow allows for a user to pursue multiple paths, or if the user may be able to skip certain later steps based upon their work in earlier steps. If it\u0026rsquo;s a longer step flow and the indicator would look too cluttered, omit the step flow indicator.  See step flow without a progress indicator specs\n   Back to top --  Mobile considerations A mobile step flow resembles the desktop versions with a few notable differences:\n The progress indicator becomes slimmer and eliminates labels to save screen space; only a horizontal version of this step progress indicator is recommended. The exit action moves to the lower left corner of the screen. A sticky footer containing all navigation actions may be employed for easier, quick navigation.  See mobile view with a progress indicator specs\nSee mobile view without a progress indicator specs\n    Back to top -- "
},
{
	"uri": "http://zui.zywave.com/components/tabs/",
	"title": "Tabs",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rBest practices  Tabs provide the user a way of viewing a subset of the information in a given section of content. Tabs can be used to display alternate views of the same content. Tabs can break up a long workflow or page of information into separate buckets. Tab labels should generally be short and sweet—one to two words—and parallel in nature. Tabs can be used as a form of tertiary navigation when necessary.  States Tabs have three states—unselected, selected, and hover. When a tab is selected, the bar slides over to the selected tab.\nSelected\n Font weight: bold Font color: ZUI Blue 500 Bar color: ZUI Blue 500  Unselected\n Font weight: regular Font color: ZUI Gray 700  Hover\n Font weight: regular Font color: ZUI Gray 700 Bar color: ZUI Gray 200    \n\nSizing and spacing The width of a tab depends on the number of characters in the tab label, so try to keep the labels no more than one or two words long.\nTab size: tab label + 20px padding on all sides\nBar width: length of the text + padding\nBar height: 4px\nBehavior and interaction Tabs are responsive to the screen size. If there isn\u0026rsquo;t enough horizontal room for all of the tabs to appear on the screen, right and left arrows appear so the user can scroll horizontally thorugh the available tabs.\nIt is recommended to try and avoid the need for horizontal scrolling on desktop screen sizes.\n  \n When navigating to a page that contains tabs, the first available tab should be selected.\nWhen a user hovers over a tab the gray bar appears below the label text. When a user has selected a tab a blue bar appears below the label text and the label text becomes ZUI blue 500 and bold.\nOn click, the \u0026ldquo;burst\u0026rdquo; animation will appear from the position on the tab that the user clicked. The burst will use the color of the app bar.\nTypes of tabs There are a variety of different ways tabs can appear based on the page layout you are using.\n Full-width tabs, full width-content\nBoth the tabs and the content stretch the full-width of the page. These tabs can be used on both page layouts with white or gray backgrounds. For more information on page width, view the guidelines for content area\n Fixed width tabs, fixed width content\nBoth the tabs and content can adhear to a fixed-width page layout. These tabs can be used on both white or gray background layouts. For more information on fixed-width layouts view the content area guidelines\n Gray background, tabs with card\nOn layouts that use a gray background, tabs can appear with a card. The tabs will be just above the card and the contents within the card are associated with the selected tab.\nThis should be used when the contents are text-based to enhance readability, or to show separation between the items within the tabbed section and other elements on the page.\n Gray background, tabs without card\nIf the contents within the tabs do not contain large amounts of text and there are no other elements on the page not contained within the tabs, then use the gray background with no card. This will increase contrast so elements like input fields will stand out more against the background.\n Full-width tabs, fixed width content\nTabs can stretch the full width of the page with their contents adhering to a fixed-width. This is a great option when using tabs as a tertiary level of navigation.\n\r\rTable of Contents \r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://zui.zywave.com/components/text-input/",
	"title": "Text Input",
	"tags": [],
	"description": "",
	"content": " See also forms Sizing \u0026amp; spacing The length of the input should be as close to the intended length of content as possible. This also applies to other form controls of a similar shape, like drop-down selects and text areas.\n{insert image for sizing}\nSee design specs\n Behavior Use different states to help show the user how they can interact with Text Inputs. Normal Text Input is blank with nothing entered, no non-standard colors.\nFocused The user has clicked into the input, it\u0026rsquo;s outlined blue and the blinking text cursor appears.\nDisabled Appears grayed out. The input can\u0026rsquo;t be used and an additional action must be taken on this screen to make it usable.\nRead only The input can\u0026rsquo;t be used and can\u0026rsquo;t be easily made usable. There are actions that can be done make it a usable eventually.\nSuccess Text Input is outlined in green. Success message may appear nearby.\nError Text Input is outlined in red. Error message with details on the error will appear nearby.\nLoading A loading icon appears on the right side of the input to indicate that something is happening.\n Text Area A Text Area is a subset of the text input specifically used for entering multiple sentences of information because of this, the input size is larger (width and length) than a standard input area. Text areas can also use a scroll bar and expander tab in the bottom right corner, if necessary.\nWe reccomend capping the max height of a text area so it doesn\u0026rsquo;t grow too large for the UI it\u0026rsquo;s in, then use a scrollbar for viewing text not within the viewing area. 150px is typically enough to get a good sense of the text within, but not blow out your screen.\n\nLabels The label elements helps bring proper context to your inputs to let the user know what data to enter.\nForm labels Generally a single label element should be present for a single control. For general form element labeling standards see our forms labeling documentation.\n\nPlace holder text Place holder text appears inside of the input field, prior to entering data into it, and disappears. It is always used in conjunction with labels, never instead of a label. It provides an example of what you should enter in that field, and the format of that information when appropriate. An example would be phone number: (555) 555-5555.\nInput prefix Added to front of the input field to add additional detail to what should be entered, like a dollar sign. To add more attention a container can be added to the styling. An example would be a magnifying glass to show that the input field is a type ahead search filter. These labels are typically an icon.\nInput suffix Added to front of the input field to add additional detail to what should be entered, like a percentage symbol. To add more attention a container can be added to the styling. hese labels are typically an icon.\nInput prefix \u0026amp; suffix  Text inputs with actions On rare occasions, you can put the button next to the input, which is often seen in search. While there’s nothing especially wrong with putting the button below the input, putting it next to it saves space and looks a bit neater. But, do not do this on standard forms that happen to have just 1 field. It’s inconsistent and unconventional. The button should be labeled with text, unless there is a very clear and deliberate icon that can be used.\n"
},
{
	"uri": "http://zui.zywave.com/components/toggles/",
	"title": "Toggles",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rA toggle is a page element used to enable or disable an associated setting or feature. For the most effective toggle usage, consider these toggle best practices:\n Toggle settings should take effect immediately without the need for a confirm or save, just as a light switch is immediate.\n Subsequent changes to the UI from the change of a toggle setting—such as hiding, showing, enabling, or disabling content\u0026ndash; are not only acceptable, but expected.\n Labeling should generally be kept in line and to the left of a toggle, and should imply the on/off or yes/no states.\n If necessary, on/off labels should be kept next to a toggle rather than inside the component itself.\n  When used correctly, toggles should follow the best practices listed above. Toggles should be used sparingly—there are few situations in which a toggle is truly the best component choice. If you are questioning whether or not a toggle is the component you need to use, you may want to consider a checkbox or radio button instead.\nStyling and specs We use two different sizes of toggles: Standard and small.\n Standard toggles\nStandard toggles are the same height and use the same padding as buttons.\n Width: 80px Height: 36px Handle: 36px   Small toggles\nSmall toggles should be used when space is limited, such as in a table.\n Width: 50px Height: 24px Handle: 24px   States\nToggles are always in a selected state—on or off—and can be enabled or, less commonly, disabled. A disabled toggle has been locked into it\u0026rsquo;s current state.\nDisabled toggles should only be shown if there is a way within the current UI to change it back to enabled.\n Colors\n   State State image Handle color Background color     Enabled on   White #FFFFFF 1px Stroke - ZUI Gray 100 ZUI Green 500   Enabled off   White #FFFFFF 1px Stroke - ZUI Gray 100 ZUI Gray 400   Disabled on   White #FFFFFF 1px Stroke - ZUI Gray 100 ZUI Green 200   Disabled off   White #FFFFFF 1px Stroke - ZUI Gray 100 ZUI Gray 100    Behavior and interaction Enabled\nThe handle is flush to one side or the other of the background. When the handle or the background is clicked, the handle slides smoothly, becoming flush with the opposite side of the background.\n Disabled\nWhen a toggle is locked, the handle is still flush to one side or the other of the background depending on what state the toggle is locked in. However, when the handle or background is clicked, the handle will wiggle in it\u0026rsquo;s curent position, indicating that the click was recieved, but the toggle state cannot be changed.\n\r\rTable of Contents  ZuiToggle  Example checked type   ZuiToggle Extends ZuiFormAssociatedElement\nExample \u0026lt;zui-toggle checked\u0026gt;\u0026lt;/zui-toggle\u0026gt; \u0026lt;zui-toggle type=\u0026#34;icon\u0026#34;\u0026gt;\u0026lt;zui-icon icon=\u0026#34;zui-star\u0026#34;\u0026gt;\u0026lt;/zui-icon\u0026gt;\u0026lt;/zui-toggle\u0026gt; checked Whether the toggle is \u0026ldquo;on\u0026rdquo; or \u0026ldquo;off\u0026rdquo;\ntype The type of toggle. Supports \u0026lsquo;standard\u0026rsquo; and \u0026lsquo;icon\u0026rsquo;; defaults to \u0026lsquo;standard\u0026rsquo; If \u0026lsquo;icon\u0026rsquo;, provide an icon to the slot to be toggled\n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/developers/tooling/",
	"title": "Tooling",
	"tags": [],
	"description": "",
	"content": " The ZUI monorepo uses a large number of tools, from building distributable packages to hosting the ZUI documentation website. Here\u0026rsquo;s a brief overview of everything you need to know. This is not an exhaustive list, but should get you the essentials.\nCLI Tools This project uses a lot of CLI tools, some you may or may not be familiar with. With the exception of a small handful, all CLI tools are installed and managed as devDependencies of the workspace. This means that you should try to use npx with those tools.\nYarn Package manager of choice. Has its own support for workspaces and has some caching/efficiencies that make it more appealing over npm.\nUseful commands: \u0026gt; yarn add ${package} ### adds ${package} as a dependency \u0026gt; yarn add ${package} -D ### add ${package} as a devDependency \u0026gt; yarn install ### installs all dependencies of a yarn project (or will create a yarn.lock file if not already existing) \u0026gt; yarn -W add ${package} ### adds ${package} as a dependency to a workspace\u0026#39;s root package.json Pro tip: Can\u0026rsquo;t tell if the project you\u0026rsquo;re working on is using yarn or npm? If there\u0026rsquo;s a yarn.lock file, it uses yarn.\nDocumentation\nLerna The glue that holds the entire monorepo together.\nYou may have noticed at this point that ALL of ZUI is in this single repository. Well, lerna is the tool we use that helps facilitate:\n building all the packages publishing all the packages using unpublished dependencies while in development  It uses some cool symlinking to simulate a proper node dependency tree. If you\u0026rsquo;re ever curious, check out the root\u0026rsquo;s `node_modules/@zywave/ folder   Useful commands: \u0026gt; lerna bootstrap ### runs yarn install and links all monorepo packages that have dependencies \u0026gt; lerna add ${package} --scope=@zywave/* ### adds ${package} to all packages in the monorepo that match the scope pattern (so all packages that start with @zywave/*) Documentation\nGulp Task library that is similar to grunt, but build aroudn filestream pipelines.\nDocumentation\nHugo Static website generator. Not really all that much to say on this one. It\u0026rsquo;s built using Go, and shows fast build times.\nDocumentation\nYeoman JavaScript template generation. Only needed if you want to create a package based off of the provided templates.\nDocumentation\nnpx Allows you to run another CLI tool from either a node/yarn project\u0026rsquo;s dependencies, or your global space if not available. Very useful for ensuring that the build tooling you use for a project is the way the author(s) intended.\nThis tool has been a part of Node since Node 8.2.0 (it actually gets installed with npm after npm 5.2.0).\nDocumentation\nSupplemental tooling Prettier Tabs vs spaces? Who really cares?\nPrettier is a file formatting tool that keeps us using similar file syntaxes (e.g. using spaces instead of tabs, single quotes instead of double, etc.)\nThis is configured in the monorepo\u0026rsquo;s .prettierrc file, and requires an additional plugin to play nicely with ESLint.\nDocumentation\nESLint No, you shouldn\u0026rsquo;t litter console.log everywhere. Stop that.\nESLint ensures that we code using similar design patterns and helps us catch potential problems early.\nThis is configured in the repo\u0026rsquo;s .eslintrc.json and .eslintignore.\nDocumentation\nNode-sass Sass compiler wrapping Libsass (a C++ alternative to the Ruby Sass compiler).\nDocumentation\nBrowsersync Hitting F5 is so 2017.\nA really cool server that will watch files for changes and refresh the browser if anything changes. Used in a lot of our gulp watch pipelines.\nDocumentation\nPolyserve Server maintained by the Polymer team that handles on-the-fly ES module resolution and other niceties.\nDocumentation\nHusky / Lint-staged No, you can\u0026rsquo;t commit your ugly code.\nThe build server will lint our code (using a variety of linting tools); these two together help you maintain sanity by running the linting prior to commit. They\u0026rsquo;ll even fix your code and stage that for you so that you hardly have to lift a finger!\nHusky documentation\nLint-staged documentation\n"
},
{
	"uri": "http://zui.zywave.com/components/tooltips/",
	"title": "Tooltips",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat is a Tooltip?  Tooltips are unobtrusive messages that provide the user with simple information when hovering over a page element.\n Tooltips are anchored to the page element in which they are referencing.\n These messages should not be critical for the user to read and there should be no action included within them.\n Tooltips trigger on hover and remain active until the user is no longer hovering over that page element. A 200ms dissolve transition fades tooltips on and off the page.\n  When to use  Use a Tooltip to help users understand unknown or unfamiliar objects that aren\u0026rsquo;t described directly in the User Interface.\n To provide information to users when they need it, and to help free up screen space\n Use a tooltip when a control doesn\u0026rsquo;t have a text label to explain it.\n  Tooltip Anatomy  Body - Centered above page element Text - Centered within Tooltip  Positioning  The tool tip positioning will default to the top of whatever page element is being hovered. Special use cases may arrive in which the bottom, right and left tooltip positions may be used if there is not sufficient space to display the tooltip, such as a top bar tooltip.  \r\rTo be implemented \n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/foundations/topbar/",
	"title": "Topbar",
	"tags": [],
	"description": "",
	"content": " What is the Topbar The top gives the user easy access to suite and account-level actions, as well as some important actions specific to the application or tool. The top bar also provides a space for product branding.\nWhen to use The Topbar is a base component of the suite and should be used for every product unless there is a spceifc reason not to.\nVariations of Topbar Althought there is not much difference in layout and componentry, depending on the application we have three different varitations of the Topbar:\n Zywave Topbar - Use when the primary user is a user client. This Topbar has a number of different branding features depending on if the product is singluar in focus or crosses multiple workflows. Client Topbar - Use when the primary user is a Brokers client. i.e. Employer Admin or Employee.  see more details below\nAnatomy Zywave Topbar The suite Topbar contains a number of different components which aid in branding, navigation, and other user actions. The components include:\n Zywave logo Branding bar Search bar Application switcher Profile manager  Adding product specific branding When nessesary,you can also includes specific product branding to the Zywave Topbar:\n Product name - The name of the product. Prodcut Specific Branding bar - A taller branding bar.   Client Topbar more to come \u0026hellip;\nSizing \u0026amp; Spacing  Zywave Topbar sizing and spacing specs Mobile Topbar and spacing specs  Behavior Actions in the Topbar  Zywave Logo - Clicking the Zywave logo will bring the user back to the homepage of the application they are in. Application switcher - When clicked a modal dialog will show the other applicaions available to the user so they easily switch between other applications they own. Profile manager - When clicked a modal dialog will show user imformation such as principle and profile.  Searching Search is an optional features dependent on the application and users\u0026rsquo; needs. Depending on importance or need of searching, this component may or may not be included in the top bar. The search bar will default to the category that\u0026rsquo;s searchable for the product. For example, content in Broker Briefcase.\nScrolling The Topbar is the highest section of the shell, meaning everything in the Sidenav, content area and footer can slide underneath it when scrolling. When the user starts scolling down the page the Topbar will shrink down to 10px high, allowing for more vertical space in the content area. Once the user scrolls up 1px the entire Topbar reappears.\nResponsive Design On smaller screens Breakpoint: \u0026lt;720, the top bar responds to allow for a better mobile experience.\n The Zywave logo moves to the middle of the Topbar A hamburger menu is located in the upper left. When pushed the Sidenav slides in from the left. Right side of top bar should only be used for prime actions per product. Example: Most partners search BB so in mobile, it would make sense for the search icon to be present in the mobile top nav bar   The App switcher and Profile manager go into the side nav. When in a single point product the product branding shrinks to a single colored line and is revealed when in the Sidenav.   "
},
{
	"uri": "http://zui.zywave.com/patterns/typeahead/",
	"title": "Typeahead",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhat is typeahead? Typeahead is a method of translating intention between user and software, by prompting suggestions for an input field. It\u0026rsquo;s such a common feature, it\u0026rsquo;s easy to overlook how often we use this in our own day-to-day interactions with technology. Most commonly used for searching, there are two basic forms of typeahead—auto-complete and auto-suggest.\n Auto-complete Returns exact query results that start with the characters typed. Dropdown options are pulled from a controlled, finite list.\nExample: a list of states that begin with \u0026lsquo;al.\u0026rsquo;  Auto-suggest Guides a user by returning a list of related keywords or phrases based on the characters typed, but that don\u0026rsquo;t necessarily match an exact query string.\nExample: a list of names that include the letters combination \u0026lsquo;ad.\u0026rsquo;\n \nBest practices To ensure the best user experience possible, keep in mind the following best practices when adding typeahead to a product feature:\n Keep the dropdown manageable and useful by trying to show seven or fewer results at once and avoiding scroll bars. Bold the unique text of each dropdown item. Provide suggestions when the second or third character is entered, and continue narrowing suggestions as more characters are typed. Keep the dropdown and text box design clean and organized.  Styling \u0026amp; specs Dropdown  Unique text font weight: 700 Hover color: ZUI Gray 50 Dropshadow  Color: Black at 16% X-Axis: 0px Y-Axis: 1px Blur radius: 3px Spread radius: 1px    All values are in pixels.\n \n Additional display options Depending on the context of the typeahead feature and what\u0026rsquo;s technically feasible, you may want to consider using search categories or displaying a user\u0026rsquo;s previous entries/searches. \nRecent entries Recently typed searches or entries are shown in a dropdown the moment the cursor is put into the search field, and disappear as the first character is typed.\n Search categories Using category headers, labels, or icons can help narrow down search suggestions by organizing items in the dropdown. If you decide to use search categories, remember that they are meant to consolidate results and make the list of suggestions easier to read. Labels should be concise, and icons must be clear and distinct.\n Header label  Color: ZUI Gray 300 Font size: 12px Font weight: 700 Text case: uppercase   Inline label  Color: ZUI Gray 300 Font size: 12px  Icons  Color: ZUI Gray 300 Size: 16px  Behavior \u0026amp; interaction Typeahead suggestions will display in a dropdown, typically after the third character is typed into the text box. Users may hover over a typeahead suggestion with their mouse, or arrow down to highlight a suggestion. To select a specific suggestion, uses may either click the suggestion with their mouse, or choose Enter when the suggestion is highlighted.\nView a live example\n Focused state\n Hover state\n \nRare situations In rare situations, you may want to consider adding additional identifying information to typeahead suggestions. For example, AMC typeahead brings back results under the traditional categories of Account and Contact, but includes the account location and contact account for each suggestion. This extra bit of information helps a user recognize and identify a suggestion more quickly and accurately.\n\r\rTo be implemented \n\r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/communications/voice-tone/",
	"title": "Voice &amp; tone",
	"tags": [],
	"description": "",
	"content": " If you\u0026rsquo;re writing in one of our products, odds are you may have heard something about voice and tone. And, if you\u0026rsquo;re like most people, you may have come out of your high school English class with only a fuzzy sense of what those terms mean.\nDon\u0026rsquo;t worry; most English teachers struggle with the terms as well.\n What are voice and tone? Voice and tone can be confusing because they refer to the way that we use specific language to deliver a message. Just as our messages can use different delivery systems composed of design elements to convey different emotions, degrees of importance or other information, the language used to convey a message may also vary. Depending on how that language varies, the reader may interpret the exact same core information as meaning different things.\nWhat is voice? Voice is the persona who\u0026rsquo;s \u0026ldquo;speaking\u0026rdquo; when you write. You can think of the Zywave product voice as the core personality of the speaker who is talking to the user.\nFor instance, consider the differences between companies like MailChimp and LifeLock. Each voice suits its company\u0026rsquo;s respective brand. MailChimp wants its customers to feel excitement and fun when they generate emails, so they speak with energy, enthusiasm and playfulness, even cracking a few jokes. LifeLock wants its customers to feel safe and secure, so they speak with a straightforward, no-nonsense voice, often using short, clear sentences conveying hard data.\nWhat is tone? Tone is simply voice applied to a specific context. That context includes both the circumstances of the communication, as well as the audience.\nThe core personality of your voice should still shine through in any communication, but it should do so in a way that makes sense given the exact situation. A fun, playful voice isn\u0026rsquo;t going to crack jokes when it\u0026rsquo;s trying to deliver bad news, but it\u0026rsquo;s not going to turn into a boring or stern voice, either.\n Zywave\u0026rsquo;s Voice Our users vary in terms of personality, geographical area, educational background, occupation, and many other factors. However, all of our users come to Zywave for products they trust to make their lives easier or better.\nWe compiled this list of adjectives to describe how the voice that speaks to those users should sound:\n Approachable Genuine Empathetic Clear Conversational Knowledgeable  We like to think of our voice as the voice of a teacher—a cool teacher, who knows you, understands your goals and needs, and wants to help you succeed.\nWhat is \u0026ldquo;conversational\u0026rdquo;? Our voice should sound natural, like the sort of thing an actual human being might say aloud to another human being. This is one of the best guides for making sure that our language is clear, approachable, and meets our user\u0026rsquo;s needs.\nPractically speaking, this means:\n Don\u0026rsquo;t overload the user with too much information at once. Shorter sentences and shorter paragraphs are easier to process and understand. When possible and appropriate, use plain language. Contractions, especially common contractions (don\u0026rsquo;t, can\u0026rsquo;t, we\u0026rsquo;re, you\u0026rsquo;re, etc.), are a natural feature of conversational language and should be used in our writing.  Formal vs. informal language Many of the characteristics of conversational language tend to fall on the \u0026ldquo;informal\u0026rdquo; end of the formal-informal spectrum, but we still want to convey that we\u0026rsquo;re knowledgeable and can be trusted. So, while our writing should always be conversational, we should be careful with some features of informal language.\nSlang Slang is very informal and tends to spread among younger speakers before older speakers adopt it. It can also be very region-specific, which is a problem if you\u0026rsquo;re writing for an international audience. Slang terms may also go out of style as quickly as they come in, lending to language that doesn\u0026rsquo;t age well. So, if you do want to use slang, try to test it with a wide cross-section of users.\n Humor Some brands—like MailChimp—are really good with humor. However, what’s considered funny can be quite subjective, and what might draw a laugh from one user might offend another. It\u0026rsquo;s also difficult to convey some of the subtleties essential to humor—like sarcasm—in text. That\u0026rsquo;s why, in general, we don\u0026rsquo;t joke around with our users very often.\n   In-product copy When writing in-product copy, consider both the idea you\u0026rsquo;re trying to convey and the delivery vehicle containing the message. If the two seem incompatible, talk to the BA and/or the designer. They might offer helpful suggestions for revising your text, or you might discover a more fundamental design problem to work through.\nFor an overview on messages as a UI element, see messages.\nGeneral instruction General instruction offers the user information that they may need—in addition to the header or other design elements—to understand where they are or what they need to do.\nA user reading general instructions primarily wants information, so your tone should be straightforward, helpful, and minimalistic. Use the principles of WIIFM (What\u0026rsquo;s in it for me?):\n Put the most important information first, so it\u0026rsquo;s easy to find. Load action verbs at the beginning of the sentence so the user can easily understand what they can do. Connect those actions to specific user goals.  DO   Contextualizes page immediately with important info first. Gives the reader actionable items by using action verbs. Ties those actions to a specific user goal—starting client communications. Avoids unnecessary fluff in favor of a clean, information-heavy message.   \nDO NOT   First two sentences do little more than express personality and restate the user\u0026rsquo;s problem. Mentions \u0026ldquo;we\u0026rdquo; rather than putting the user first with action verbs. Provides no link between resources and a user benefit.   \n Guidance When writing a guidance message, you want to convey recommendations without making the user feel like you\u0026rsquo;re stepping on their toes.\nRemain friendly, helpful, and direct. Frame the guidance as a suggested course of action. Build the message around action verbs, but use words like \u0026ldquo;may\u0026rdquo; or \u0026ldquo;might\u0026rdquo; or \u0026ldquo;often\u0026rdquo; to soften your tone and convey that this is a suggestion, not a command. Finally, tie the suggestion to a reason, so the user understands why you’re making the recommendation.\nDO   Loads the first sentence with the relevant action. Softens the tone with \u0026ldquo;try to.\u0026rdquo; Even though it\u0026rsquo;s wordier, it immediately signals that you\u0026rsquo;re offering the user an option, not a requirement. Explains the \u0026ldquo;why\u0026rdquo; of this best practice, i.e., saving the user time in the future.   \nDO NOT   Sounds like a command Doesn\u0026rsquo;t offer any reason. Unclear whether the message refers to all information, even the parts that aren’t marked as required.   \n Empty states Empty states can be an opportunity to capture the user’s imagination and get them excited about the possibilities of working with our products.\nGiven that this is empty real estate, take the opportunity to delight the user and have a little fun. Still, be cautious about making the user feel frustrated or defeated because of that empty state.\nDO   Expresses exactly what the section is for. Shows the benefit. Offers a solution.   \nDO NOT   Implies that having no campaigns is bad; that the user has failed. Tries to tease the user into setting up a campaign, which is exactly the kind of humor that can be hard to put into text without offending some users. Doesn\u0026rsquo;t even try to show a benefit to the feature.   \n Alerts Alerts require you to be as firm as possible while still expressing concern for the user.\nConveying the necessary information while still being sympathetic is essential. Tonally, alerts will likely vary more than other message types, since the emotion conveyed by an error alert is far different than that conveyed by a success alert.\nThat\u0026rsquo;s why we often tag the very beginning of the message with an interjection or brief sentence that immediately signals the tone. Such a tag can also, in the event of a fail alert, soften the impact of bad news by signaling that we understand the emotional impact of that bad news.\n Success:  Yes! Success! Awesome! You did it!  Warning:  Be careful! Are you sure you want to _?  Fail:  Oops! Uh-oh! Whoops!      Help documentation and release notes Who\u0026rsquo;s reading help? Users who read our help materials generally fall into two categories:\n Those who like to read the directions before trying something new. Those who don\u0026rsquo;t bother with the directions until something has gone wrong.  As a general rule, the in-product copy and design should be all that a user needs to navigate through the product. If it\u0026rsquo;s not, take it as a sign that there\u0026rsquo;s a more fundamental design flaw somewhere in the product.\nThat\u0026rsquo;s why, generally speaking, it\u0026rsquo;s best to approach help materials as a resource our users turn to when our product has left them feeling confused, impatient, or frustrated.\nHelping our confused, impatient, and/or frustrated users When inside of help, our users want clear answers, they want to be able to find those answers quickly, and they want actionable solutions to their problems.\nThere are several best practices that we employ in our writing to help our users achieve those goals.\nHeadlines, subheads and other markers of hierarchy Outlining is generally a good practice in writing, and it\u0026rsquo;s one that can translate directly into the final product. Clear subheads arranged in a logical and intuitive hierarchy allow the user to skim the contents of a page and quickly find the information they want.\nOrdered lists When talking a user through a workflow with a specific sequence of steps, use concise language and emphasize key actions with bold in an ordered (numbered) list.\nCut the fluff Clear, concise, and actionable language are the best tools for giving the user what they want. Save flourishes of language that convey more personality for other communications.\nRelease Notes Release notes are the one section of help that most users will read before they encounter problems. In fact, release notes might be a user\u0026rsquo;s first encounter with a product or feature.\nThat\u0026rsquo;s why we approach release notes with two slightly different goals in mind:\n To inform the user about what a product\u0026rsquo;s new features are and how they work. To intrigue the user and entice them to check out new features by highlighting their benefits.  Here are a few best practices for writing release notes:\nCoordinate with other teams talking about this release Marketing and instructional design are also usually producing collateral to announce or explain a release. Make sure you coordinate with those departments to ensure you\u0026rsquo;re using the same or similar language.\nBe a little salesy When we release a great new feature, don\u0026rsquo;t be afraid to channel your inner salesperson and describe the benefits to our user. Don\u0026rsquo;t go overboard—this isn\u0026rsquo;t marketing copy—but you can definitely write with a little well-deserved enthusiasm.\n Good UX writing checklist UX as a field—let alone UX writing as a subspecialty—is still relatively young, which means that there\u0026rsquo;s not much definition to what should distinguish UX writing. But based on some of the guiding principles of UX, as well as our own experience, we’ve come up with the following checklist. Use it as a reference to make sure you’re producing the most effective writing.\n Accurate Clear Concise Actionable Human Delightful  When revising writing, we often find ourselves checking off boxes further down the line the more we revise and iterate. If pressed because of time or other constraints, you may find yourself unable to hit every point every time.\nAs a rule, make sure you have earlier items on the list (accurate, clear, concise) covered. Also, never sacrifice earlier elements for later ones. Our users won\u0026rsquo;t care how funny or clever your writing is if it doesn\u0026rsquo;t give them clear, accurate information.\n"
},
{
	"uri": "http://zui.zywave.com/developers/webcomponents/",
	"title": "Web components",
	"tags": [],
	"description": "",
	"content": " Web Components are here, and they are only going to get better. ZUI is embracing this new web feature to make UI rich and simple components, while supporting as many applications as we can. For everything about Web Components, check out https://www.webcomponents.org/.\nWhy web components? Before we dive into the \u0026ldquo;what are web components\u0026rdquo; section, I just want to detour into the \u0026ldquo;why.\u0026rdquo; Why not just choose a framework? Or simpler yet, why not just continue ZUI 3.x components?\nWe decided on web components because web components offer something that we otherwise couldn\u0026rsquo;t accomplish: interoperability. The ease of installing a web component, applying a theme, and everything just working (regardless of your application\u0026rsquo;s stack) is something we\u0026rsquo;ve not really had with ZUI 2 or ZUI 3. And choosing to just drop Durandal/knockout and create an Aurelia, or Vue, or something else that comes along next year is just repeating the past. ZUI isn\u0026rsquo;t intended to be a framework; it\u0026rsquo;s intended to be a spec and design tool to make your application look like a Zywave product.\nWeb components are the answer to this problem. Not to mention, we get a huge added benefit of being fully backward compatible. You can use your ZUI 2 or 3 components and styles while porting over to ZUI 4 and not have to do a full site regression. There\u0026rsquo;s no more conflict, so the upgrade process shouldn\u0026rsquo;t block development for weeks.\nWhat are web components? Web Components is a collection of new web standards that allows developers to create browser-level elements and distribute them to be used in any application. Here\u0026rsquo;s just a brief walkthrough of some of the key standards, but for more information, you should really check out the Web Components website.\nCustom elements Documentation: https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\nIf you\u0026rsquo;ve used ZUI 3, you might be somewhat familiar with what this looks like. the Custom Elements API allows developers to register their own elements, and define what that element looks like. For example, a well might look something like this:\n\u0026lt;zui-well\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m a message\u0026lt;/p\u0026gt; \u0026lt;/zui-well\u0026gt; Note: Custom Elements hate conflict. You can\u0026rsquo;t define two elements of the same name (the Internet will literally explode). This is an important thing to keep in mind when pulling in web components.\nTemplate Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\nCustom Elements use the \u0026lt;template\u0026gt;\u0026lt;/template\u0026gt; HTML element, which has existed long before this spec. This allows their registration to define what it looks like, without actually being rendered in the DOM.\nSlot Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot\nThis \u0026ldquo;element\u0026rdquo; actually serves as a placeholder. When used with Custom Elements, it allows the consumer to add content inside of the custom element, and the custom element can then render it where and how it wants to. In the above zui-well example, the message actually will get \u0026ldquo;slotted\u0026rdquo; when rendered. If you take a peek at zui-well\u0026rsquo;s definition, you\u0026rsquo;ll see what this actually looks like.\nShadow DOM Documentation: https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\nRemember how I mentioned that ZUI 4 is backwards compatible? Shadow DOM is what really ensures this.\nShadow DOM allows a custom element to encapsulate its styles and behavior. This means that zui-well doesn\u0026rsquo;t need to worry about bleeding CSS (goodbye silly CSS classes, like .zui-knockout-table__row). Similarly, its Shadow DOM cannot be manipulated by the root DOM (and conversely, the custom element cannot manipulate the root DOM).\nEncapsulation is cool, ok. And legible CSS is even cooler.\nNote: What a badass name for a web feature, right?\nCSS variables/custom properties Documentation: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\nNow, I know what you\u0026rsquo;re thinking. Shadow DOM is scary; how can I style a custom element if its styles are encapsulated?!\nEnter CSS variables. With web components, CSS is an actual part of your custom element\u0026rsquo;s API.\nmy-element.css\n:host { background-color: var(--my-element-background, red); /* var() unwraps --my-element-background, and if it doesn\u0026#39;t exist, optionally falls back to red */ background-color: var(--my-element-background); background-color: deleteme 30px; /* is also valid; if `--my-element-background` isn\u0026#39;t defined, `background-color` just won\u0026#39;t be set */ } application.css\n:root { --my-element-background: green; // set a CSS variable called --my-element-background to the color green } p.wraps-my-element { --my-element-background: blue; // set a CSS variable called --my-element-background to the color blue } index.html\n\u0026lt;body\u0026gt; \u0026lt;my-element\u0026gt;I\u0026#39;m not red, but green!\u0026lt;/my-element\u0026gt; \u0026lt;p class=\u0026#34;wraps-my-element\u0026#34;\u0026gt;\u0026lt;my-element\u0026gt;I\u0026#39;m not red, nor green, but blue!\u0026lt;/my-element\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; That\u0026rsquo;s it. It\u0026rsquo;s really that simple. The element declares a variable (--my-element-background), with a fallback value (red). Then, the consumer sets that variable via CSS, and voilà, you have provided a hook to style your custom element.\nCSS variables aren\u0026rsquo;t just for custom elements. If you have a use case for them, they\u0026rsquo;re really slick.\nNote: You can do some REALLY cool stuff with this; like easy theming, toggling a light/dark-mode, etc.\nCustomEvent Documentation: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\nNot exactly part of the Web Component spec, but CustomEvent exists and allows us to create more DOM-like custom elements. They\u0026rsquo;re actually really simple:\nmy-element.js\n... onPropChanged(newVal, oldVal) { this.dispatchEvent(new CustomEvent(\u0026#39;propchanged\u0026#39;, { bubbles: true, composed: true, // allows the event to be consumed outside the Shadow DOM  detail: { // allows you to define a payload for subscribers to consume  value: newVal } })); } ...  And from your application: app.js\nconst myElement = document.querySelector(\u0026#34;my-element\u0026#34;); myElement.addEventListener(\u0026#34;propchanged\u0026#34;, event =\u0026gt; { console.log(`Prop was changed to ${event.detail.value}`); }); "
},
{
	"uri": "http://zui.zywave.com/components/wells/",
	"title": "Well",
	"tags": [],
	"description": "",
	"content": "\r\r\rDesign\rToolkit\r\r\rWhen to use We use wells to place moderate emphasis on a message. Wells should attract the user\u0026rsquo;s attention more than uncontained text or a toast, but they should never prevent a user from completing their desired action.\nFor more information on when a well is the appropriate delivery system, see messages.\n Styling We differentiate the different styles of wells by both color and icon. These features allow a user skimming the page to know, at a glance, how important the message in that well is.\n Type of wells We have four types of wells to help convey a message and each are color-coded with a unique icon.\nInfo well  Bar color: ZUI Blue Icon: ZUI Info Icon color: ZUI Blue Action link color: ZUI Blue     Warning well  Bar color: ZUI Orange 400 Icon: ZUI Warning Icon color: ZUI Orange 400 Action link color: ZUI Orange 400     Error well  Bar color: ZUI Red 400 Icon: ZUI Error Icon color: ZUI Red 400 Action link color: ZUI Red 400     Success well  Bar color: ZUI Green 400 Icon: ZUI Success Icon color: ZUI Green 400 Action link color: ZUI Green 400     \n Shared styles  Background color: White Font color: ZUI Gray 800 Border radius: 4px Dropshadow #1  Color: Well type\u0026rsquo;s color level 600 at 16% X-Axis: 0 Y-Axis: 1px Blur radius: 3px Spread radius: 0  Dropshadow #2  Color: Black at 2% X-Axis: 0 Y-Axis: 15px Blur radius: 30px Spread radius: 0   See base design specs\n Sizing and spacing Our sizing and spacing standards are based off of the optimal length for a line of text. We use that standard to determine icon size, padding, and margins to ensure that all elements in the well are easily identifiable and readable.\nSee wells design specs\n All values are in pixels. \n\n Features Mix and match features below to get a well suited for your message.\nAnimated well (default) By default, wells appear shortly after a user takes action, so that the user doesn\u0026rsquo;t mistake a well for a static or unimportant part of the page. For example, an employer can\u0026rsquo;t sign enrollment forms on behalf of the employee when making their elections.\nOur recommendation is to only use animated wells when a message is triggered by the user.\nStatic well Whenever a well is present at all times, regardless of the user\u0026rsquo;s actions, opt to use a static and inanimate well. For example, a broker is viewing a past distribution and cannot make changes to the content.\nStatic wells are best used when the message is always present, regardless of the user\u0026rsquo;s actions.\nActionable well All wells can have one action associated with the message. Actions in wells are styled in all caps and are the same color as the icon, in order to contrast the action text with the message text as well as to call some additional attention to the action.\nTo not confuse users, we recommend calling out one action per well.\nDismissible well Sometimes a well doesn\u0026rsquo;t need to be present on the screen at all times after it has been triggered. A dismissible well allows the user to close it. This is typically useful for reminders, success wells, or minimal-impacting warning wells that appear frequently, but do not impede the user\u0026rsquo;s workflow.\nWhen a well is dismissed, we recommend the application remember the user\u0026rsquo;s choice and not show the well again after a page refresh or the back button is pressed to get back to the previous page.\nBanner well Site-wide messages or messages that appear on more than one page in a single workflow can be delivered as a banner well that spans across the entire width of the page. This is helpful for site-wide messages such as an employer is making changes on behalf of an employee or the user experience is much better in a browser that is not Internet Explorer 11.\nWe recommend you to make banner wells static since they appear on more than one page and push content down. This can be annoying and jarring to users.\n Rare situations Multi-item wells, multi-paragraph wells, wells with headlines, or multiple wells all introduce questions of hierarchy. That undermines the ideal use of wells\u0026ndash;delivering a brief, specific, unified message of moderate importance.\n  \nIf you\u0026rsquo;re designing a well that contains the elements listed in this section, there\u0026rsquo;s a good chance that you may have chosen the wrong delivery system (link to messages) or that there are larger, more fundamental problems with on the page with either messaging or design.\nIf you must use these features, however, do so according to these standards.\n\r\rTable of Contents  ZuiWell  Example type noIcon dismissible banner noAnimation static _computeIcon  Parameters    ZuiWell Extends ZuiBaseElement\nExample \u0026lt;zui-well type=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;div\u0026gt; Employees must sign their own enrollment forms. \u0026lt;/div\u0026gt; \u0026lt;button slot=\u0026#34;action\u0026#34;\u0026gt;Remind employees\u0026lt;/button\u0026gt; \u0026lt;/zui-well\u0026gt; type The type of well you want to display. Defaults to \u0026lsquo;info\u0026rsquo;. The types of zui-well include: \u0026lsquo;info\u0026rsquo;, \u0026lsquo;warning\u0026rsquo;, \u0026lsquo;error\u0026rsquo;, \u0026lsquo;success\u0026rsquo;\nnoIcon Whether or not you want to display an icon in your well\ndismissible Whether or not you want your well to be dismissible\nbanner Whether or not you want your well to span the entire width of its parent container\nnoAnimation DEPRECATED, will be removed in a future release; use \u0026ldquo;static\u0026rdquo; instead\nstatic If set, the well will not slide down and will instead just remain static on the page\n_computeIcon Parameters  type string Computes the _icon property. This determines which zui-icon this well will use.  \r\r\r\r"
},
{
	"uri": "http://zui.zywave.com/communications/writing-style-guide/",
	"title": "Writing style guide",
	"tags": [],
	"description": "",
	"content": " Principles This a living document, meaning that is always growing and changing, just like ZUI, just like language itself. Writing in Zywave products should be:\n Clear and Concise Easily understandable Useful/helpful Actionable, whenever possible Motivating or persuasive, when necessary  Voice \u0026amp; Tone Tone is simply voice applied to a specific context. That context includes both the circumstances of the communication, as well as the audience. The core personality of your voice should still shine through in any communication, but it should do so in a way that makes sense given the exact situation. Voice is the persona who\u0026rsquo;s \u0026ldquo;speaking\u0026rdquo; when you write. You can think of the Zywave product voice as the core personality of the speaker who is talking to the user. Zywave’s voice can be described as:\n Approachable Genuine Empathetic Clear Conversational Knowledgeable  Audience It is important to note we have a different audience than the marketing or content teams because this is a style guide specific to writing in our products\n Our audience is product users Our audience will vary from product to product, and potentially will vary inside products depending on who is using it (HRc potentially has 3-4 different audiences using it: broker, broker admins, clients, etc.) Our audience could be viewed as a combination of both marketing and content’s audiences, but a little more relaxed  Grammar and Mechanics This is the meat and potatoes of the style guide. It covers the usual topics and how they impact both copy and microcopy/web elements. If you\u0026rsquo;re unsure about any on-screen-text, especially if it isn’t address in this style guide, ask a UX Writer. We’re nice and don’t mind answering questions.\nCapitalization  Use sentence case for everything. Sentence case is capitalizing the first letter of the first word and none of the others. Always capitalize the following words: Partners, Zywave positions such as Partner Support (Zywave Consultant, Project Manager, etc), Help (when referring to the Help section), and the first word after a colon  Punctuation  Periods: Skip periods and unnecessary punctuation on single sentences. This help readers scan text at a glance. Avoid using periods in single sentences in these: Labels, Hover text, Bulleted lists, dialog body text. Periods should be used on: Multiple sentences, any sentence before a link Oxford/serial comma: Use to the comma to avoid potential confusion Exclamation points: Use them sparingly, don’t use more than 1, even if you’re really, really excited about something Ampersands: Only use ampersands when conserving space is important, ideally only on buttons, or if it is part of a company or brand name Semicolons: They usually support long, complicated sentences that could be simplified, shortened, or split in to 2 sentences Quesion marks: Don’t use punctuation in a page title/heading unless the title/heading is a question  Lists  Use lists to clearly and simply present steps, groups, or sets of information When writing a list, use the serial/Oxford comma Use numbers when the order of the list is important, otherwise avoid them Only use punctuation if there are multiple sentences in a list item  Numbers  Spell out a number when it begins a sentence, otherwise, use the numeral. This includes ordinals (-st, -nd, etc), too. Using the numeral saves a bit of space, which is usually important. If it feels weird to use \u0026lsquo;1\u0026rsquo; instead of \u0026lsquo;one,\u0026rsquo; just go with your gut.  Bolding and Italicizing  Using bolding to emphasize an action, link, or button you are referencing Avoid italicizing. Italic fonts don’t appear as clearly as bold fonts. The exception being normally italicized things, like titles of books or movies.  Active/passive voice  Use active voice Avoid passive voice Write positively whenever possible, avoid ‘not’ when possible  Contractions  Use them, especially to save space in web elements, like buttons. However, sometimes \u0026ldquo;do not\u0026rdquo; can give more emphasis than \u0026ldquo;don\u0026rsquo;t\u0026rdquo; when needed.  New vs. Old Always try to use what is defined in this style guide. If what is in the style guide obviously does not match what is live in product, consider the following:\n How noticeable is the difference? Use what is laid out in the style guide, unless it will be distracting or obviously different from what is in product. Can the text in product be updated or changed to match the style guide? If it cannot be changed at the same time as the text you are adding or updating, when can it be updated or changed? How often will the product be updated? Will it be a long time before the text in that product is updated again? You may want to use this opportunity to get the text up to speed, even if it doesn’t perfectly match the rest of the product. Is there a middle ground between what is in the style guide and what is in the product that makes sense to use?  Additional resources  Mailchimp Content Style Guide Material Design 18F Content Guide Atlassian writing style guide Plain Language  Click here to download a pdf version of the Style Guide\nZywave product trademarks Always enter product names with their appropriate trademark, which should be superscript. Products and their appropriate trademarks are listed below.\n     Registered® tools     AgencyFuel®   Broker Briefcase®   Decision Master® Warehouse   HRconnection®   ModMaster®   MyWave®   Mywave Connect®   MyWave® Portal   MyWave Elements®   PlanAdvisor®   Plan Doc Builder®   RALLE® Warehouse   SalesPulse®   Zywave® Sidebar        Trademarked™ tools     BrokerageBuilder™   Zywave Home™   ZywaveRx™        No trademark or registered symbols     Account Management Center   ReportCenter      "
},
{
	"uri": "http://zui.zywave.com/",
	"title": "Zywave User Interface",
	"tags": [],
	"description": "",
	"content": " What is ZUI?  The Zywave User Interface (ZUI) is a modern and responsive front-end framework based on Zywave\u0026rsquo;s established design standards. It\u0026rsquo;s the living domain of our visual language that serves as our guide to creating first-rate partner solutions with ease. ZUI is custom-made by our Zywave team to fit our specific needs; it\u0026rsquo;s not a definitive guide on development, design, or documentation.  \nHow does ZUI aid your workflow  Time Save time by using ZUI as a quick reference for styles, whether you\u0026rsquo;re a new or established team member.\n Communication Communicate with other team members using ZUI shared vocabulary, foundations, interactivity, and more.\n Consistency Employ and maintain consistency when only referencing one place to quickly see if designs, documentation, and more deviate from our established styles.\n \n"
}]