{
  "version": "experimental",
  "tags": [
    {
      "name": "zui-dialog-polymer",
      "path": "./..\\src\\zui-dialog-polymer.js",
      "description": "Creates an overlaying dialog modal.",
      "attributes": [
        {
          "name": "no-cancel-outside-dialog",
          "description": "When attribute is present, users cannot click outside the dialog card, in the translucent overlay, to close the dialog which is the default behavior otherwise",
          "type": "String",
          "default": "false"
        },
        {
          "name": "hide-backdrop",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "dialog-close",
          "description": "Add this attribute to the corresponding footer `<zui-button>`, when clicked it will cancel/close if attribute is present",
          "type": "String"
        },
        {
          "name": "dialog-confirm",
          "description": "Add this attribute to the corresponding footer `<zui-button>`, when clicked it will close and will trigger the custom event 'close'",
          "type": "String"
        }
      ],
      "properties": [
        {
          "name": "noCancelOutsideDialog",
          "attribute": "no-cancel-outside-dialog",
          "description": "When attribute is present, users cannot click outside the dialog card, in the translucent overlay, to close the dialog which is the default behavior otherwise",
          "type": "String",
          "default": "false"
        },
        {
          "name": "hideBackdrop",
          "attribute": "hide-backdrop",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "sizingTarget",
          "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element.",
          "type": "Element"
        },
        {
          "name": "fitInto",
          "description": "The element to fit `this` into.",
          "type": "object | null | undefined"
        },
        {
          "name": "noOverlap",
          "description": "Will position the element around the positionTarget without overlapping\nit.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "positionTarget",
          "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node.",
          "type": "Element"
        },
        {
          "name": "horizontalAlign",
          "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
          "type": "string | null | undefined"
        },
        {
          "name": "verticalAlign",
          "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
          "type": "string | null | undefined"
        },
        {
          "name": "dynamicAlign",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "horizontalOffset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
          "type": "number | null | undefined"
        },
        {
          "name": "verticalOffset",
          "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
          "type": "number | null | undefined"
        },
        {
          "name": "autoFitOnAttach",
          "description": "Set to true to auto-fit on attach.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "opened",
          "description": "True if the overlay is currently displayed.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "canceled",
          "description": "True if the overlay was canceled when it was last closed.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "withBackdrop",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "noAutoFocus",
          "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "noCancelOnEscKey",
          "description": "Set to true to disable canceling the overlay with the ESC key.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "noCancelOnOutsideClick",
          "description": "Set to true to disable canceling the overlay by clicking outside it.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "closingReason",
          "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`.",
          "type": "object | null | undefined"
        },
        {
          "name": "restoreFocusOnClose",
          "description": "Set to true to enable restoring of focus when overlay is closed.",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "allowClickThrough",
          "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "alwaysOnTop",
          "description": "Set to true to keep overlay always on top.",
          "type": "boolean | null | undefined"
        },
        {
          "name": "scrollAction",
          "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
          "type": "string | null | undefined"
        },
        {
          "name": "backdropElement",
          "description": "The backdrop element.",
          "type": "Element"
        },
        {
          "name": "rootPath",
          "type": "string"
        },
        {
          "name": "importPath",
          "type": "string"
        },
        {
          "name": "root",
          "type": "StampedTemplate | HTMLElement | ShadowRoot | null"
        },
        {
          "name": "$",
          "type": "{ [key: string]: Element; }"
        },
        {
          "name": "PROPERTY_EFFECT_TYPES"
        }
      ],
      "events": [
        {
          "name": "close",
          "description": "Close event dispatches event details, this fires when users click an element with the `dialog-confirm` attribute present"
        }
      ],
      "slots": [
        {
          "name": "header",
          "description": "Slot for title text"
        },
        {
          "name": "content",
          "description": "Slot for content"
        },
        {
          "name": "footer",
          "description": "Slot for footer `<zui-button>`'s to close or confirm dialog"
        }
      ]
    }
  ]
}